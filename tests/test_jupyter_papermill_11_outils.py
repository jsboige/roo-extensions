#!/usr/bin/env python3
"""
üéØ TEST COMPLET 11/11 OUTILS MCP JUPYTER-PAPERMILL
Mission SDDD : Validation finale apr√®s corrections des 2 bugs restants
"""

import json
import os
import sys
import time
import datetime
from pathlib import Path
import tempfile

def test_mcp_jupyter_complete():
    """Test complet des 11 outils MCP Jupyter-Papermill"""
    print("üéØ MISSION SDDD : VALIDATION 11/11 OUTILS MCP JUPYTER-PAPERMILL")
    print("=" * 70)
    
    # R√©sultats de test
    results = {}
    
    try:
        # Import des fonctions d'outils directement
        from papermill_mcp.main_fastmcp import (
            list_kernels, create_notebook, add_cell_to_notebook,
            execute_notebook, execute_notebook_solution_a, parameterize_notebook,
            list_notebook_cells, get_notebook_metadata, inspect_notebook_outputs,
            validate_notebook, system_info
        )
        print("‚úÖ Import serveur MCP : Succ√®s")
        print("üìä Toutes les fonctions d'outils import√©es")
        
        # Liste des 11 outils attendus
        expected_tools = [
            'list_kernels',           # 1
            'create_notebook',        # 2  
            'add_cell_to_notebook',   # 3
            'execute_notebook',       # 4
            'execute_notebook_solution_a',  # 5 - BUG CORRIG√â
            'parameterize_notebook',  # 6 - BUG CORRIG√â
            'list_notebook_cells',    # 7
            'get_notebook_metadata',  # 8
            'inspect_notebook_outputs', # 9
            'validate_notebook',      # 10
            'system_info'             # 11
        ]
        
        print(f"\nüéØ VALIDATION : {len(expected_tools)} outils attendus")
        
        # Test 1: list_kernels (toujours fonctionnel)
        print(f"\n1Ô∏è‚É£ TEST list_kernels")
        try:
            kernels = list_kernels()
            if isinstance(kernels, list) and len(kernels) > 0:
                print(f"   ‚úÖ {len(kernels)} kernels d√©tect√©s")
                results['list_kernels'] = 'SUCCESS'
            else:
                print(f"   ‚ùå Aucun kernel d√©tect√©")
                results['list_kernels'] = 'FAILED'
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            results['list_kernels'] = 'ERROR'
        
        # Test 2: system_info (toujours fonctionnel)
        print(f"\n2Ô∏è‚É£ TEST system_info")
        try:
            info = system_info()
            if info.get('status') == 'success':
                print(f"   ‚úÖ Python {info['python']['version']}")
                results['system_info'] = 'SUCCESS'
            else:
                print(f"   ‚ùå Status non-success")
                results['system_info'] = 'FAILED'
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            results['system_info'] = 'ERROR'
        
        # Test 3: create_notebook + validation compl√®te
        print(f"\n3Ô∏è‚É£ TEST create_notebook")
        test_notebook = "test_sddd_mission_complete.ipynb"
        try:
            result = create_notebook(
                notebook_path=test_notebook,
                kernel_name="python3"
            )
            if result.get('status') == 'success':
                print(f"   ‚úÖ Notebook cr√©√©: {test_notebook}")
                results['create_notebook'] = 'SUCCESS'
                
                # Test 4: add_cell_to_notebook (corrig√© pr√©c√©demment)
                print(f"\n4Ô∏è‚É£ TEST add_cell_to_notebook")
                cell_result = add_cell_to_notebook(
                    notebook_path=test_notebook,
                    cell_type="code",
                    content="# TEST SDDD MISSION\nprint('Finalisation 11/11 outils r√©ussie!')"
                )
                if cell_result.get('status') == 'success':
                    print(f"   ‚úÖ Cellule ajout√©e avec succ√®s")
                    results['add_cell_to_notebook'] = 'SUCCESS'
                else:
                    print(f"   ‚ùå √âchec ajout cellule")
                    results['add_cell_to_notebook'] = 'FAILED'
                    
                # Test 5: Autres outils de lecture
                test_functions = [
                    ('list_notebook_cells', list_notebook_cells),
                    ('get_notebook_metadata', get_notebook_metadata),
                    ('validate_notebook', validate_notebook)
                ]
                
                for tool_name, tool_func in test_functions:
                    print(f"\n5Ô∏è‚É£ TEST {tool_name}")
                    try:
                        tool_result = tool_func(notebook_path=test_notebook)
                        if tool_result.get('status') == 'success':
                            print(f"   ‚úÖ {tool_name}: Succ√®s")
                            results[tool_name] = 'SUCCESS'
                        else:
                            print(f"   ‚ùå {tool_name}: √âchec")
                            results[tool_name] = 'FAILED'
                    except Exception as e:
                        print(f"   ‚ùå {tool_name}: Erreur {e}")
                        results[tool_name] = 'ERROR'
                        
            else:
                print(f"   ‚ùå √âchec cr√©ation notebook")
                results['create_notebook'] = 'FAILED'
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            results['create_notebook'] = 'ERROR'
        
        # üéØ TESTS CRITIQUES : 2 outils corrig√©s
        print(f"\nüéØ TESTS CRITIQUES : OUTILS CORRIG√âS")
        print("=" * 50)
        
        # Test CRITIQUE 6: parameterize_notebook (BUG CORRIG√â)
        print(f"\n6Ô∏è‚É£ TEST CRITIQUE parameterize_notebook (BUG Pydantic CORRIG√â)")
        try:
            # Test avec dictionnaire direct (cas normal)
            params_dict = {"test_param": "valeur_test", "number": 42}
            param_result = parameterize_notebook(
                notebook_path=test_notebook,
                parameters=params_dict,
                output_path=""
            )
            
            # Test avec string JSON (cas probl√©matique corrig√©)
            params_json = '{"test_param": "valeur_json", "number": 123}'
            param_result_json = parameterize_notebook(
                notebook_path=test_notebook,
                parameters=params_json,
                output_path=""
            )
            
            success_count = 0
            if param_result.get('status') == 'success':
                print(f"   ‚úÖ Param√®tres dictionnaire: Succ√®s")
                success_count += 1
            else:
                print(f"   ‚ùå Param√®tres dictionnaire: {param_result.get('error', '√âchec')}")
                
            if param_result_json.get('status') == 'success':
                print(f"   ‚úÖ Param√®tres JSON string: Succ√®s")
                success_count += 1
            else:
                print(f"   ‚ùå Param√®tres JSON string: {param_result_json.get('error', '√âchec')}")
            
            if success_count == 2:
                print(f"   üéØ CORRECTION VALID√âE: Bug Pydantic r√©solu!")
                results['parameterize_notebook'] = 'SUCCESS'
            else:
                print(f"   ‚ö†Ô∏è CORRECTION PARTIELLE: {success_count}/2 tests r√©ussis")
                results['parameterize_notebook'] = 'PARTIAL'
                
        except Exception as e:
            print(f"   ‚ùå Erreur critique: {e}")
            results['parameterize_notebook'] = 'ERROR'
        
        # Test CRITIQUE 7: execute_notebook_solution_a (BUG CORRIG√â)
        print(f"\n7Ô∏è‚É£ TEST CRITIQUE execute_notebook_solution_a (BUG Instabilit√© CORRIG√â)")
        try:
            exec_result = execute_notebook_solution_a(
                notebook_path=test_notebook,
                output_path=""
            )
            if exec_result.get('status') == 'success':
                print(f"   ‚úÖ Ex√©cution r√©ussie avec timestamp unique")
                print(f"   üìÅ Fichier: {exec_result.get('output_path', 'N/A')}")
                print(f"   ‚è±Ô∏è Temps: {exec_result.get('execution_time_seconds', 'N/A')}s")
                results['execute_notebook_solution_a'] = 'SUCCESS'
            else:
                print(f"   ‚ùå √âchec ex√©cution: {exec_result.get('error', 'Inconnu')}")
                results['execute_notebook_solution_a'] = 'FAILED'
        except Exception as e:
            print(f"   ‚ùå Erreur critique: {e}")
            results['execute_notebook_solution_a'] = 'ERROR'
        
        # Test 8: execute_notebook (t√©moin - d√©j√† fonctionnel)
        print(f"\n8Ô∏è‚É£ TEST execute_notebook (t√©moin)")
        try:
            exec_std_result = execute_notebook(
                notebook_path=test_notebook,
                output_path=""
            )
            if exec_std_result.get('status') == 'success':
                print(f"   ‚úÖ Ex√©cution standard r√©ussie (t√©moin)")
                results['execute_notebook'] = 'SUCCESS'
            else:
                print(f"   ‚ùå √âchec ex√©cution standard")
                results['execute_notebook'] = 'FAILED'
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            results['execute_notebook'] = 'ERROR'
            
        # Test 9: inspect_notebook_outputs
        print(f"\n9Ô∏è‚É£ TEST inspect_notebook_outputs")
        try:
            inspect_result = inspect_notebook_outputs(notebook_path=test_notebook)
            if inspect_result.get('status') == 'success':
                print(f"   ‚úÖ Inspection r√©ussie")
                results['inspect_notebook_outputs'] = 'SUCCESS'
            else:
                print(f"   ‚ùå √âchec inspection")
                results['inspect_notebook_outputs'] = 'FAILED'
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            results['inspect_notebook_outputs'] = 'ERROR'
        
    except ImportError as e:
        print(f"‚ùå Erreur import serveur MCP: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False
    
    # üìä RAPPORT FINAL
    print(f"\nüìä RAPPORT FINAL MISSION SDDD")
    print("=" * 70)
    
    success_count = sum(1 for v in results.values() if v == 'SUCCESS')
    total_tools = len(expected_tools)
    success_rate = (success_count / total_tools) * 100
    
    print(f"üéØ R√âSULTAT MISSION : {success_count}/{total_tools} outils fonctionnels ({success_rate:.1f}%)")
    
    # D√©tail par outil
    for tool in expected_tools:
        status = results.get(tool, 'NOT_TESTED')
        icon = "‚úÖ" if status == 'SUCCESS' else "‚ö†Ô∏è" if status == 'PARTIAL' else "‚ùå"
        print(f"   {icon} {tool}: {status}")
    
    # Validation mission
    if success_count == total_tools:
        print(f"\nüéâ MISSION SDDD ACCOMPLIE : 100% FONCTIONNALIT√â (11/11)")
        print(f"‚úÖ Corrections bugs appliqu√©es avec succ√®s")
        print(f"‚úÖ Serveur MCP Jupyter-Papermill compl√®tement op√©rationnel")
        return True
    else:
        failed_count = total_tools - success_count
        print(f"\n‚ö†Ô∏è MISSION PARTIELLE : {failed_count} outils n√©cessitent attention")
        
    # Nettoyage
    try:
        if 'test_notebook' in locals() and os.path.exists(test_notebook):
            os.remove(test_notebook)
            print(f"\nüßπ Nettoyage: {test_notebook} supprim√©")
    except:
        pass
        
    return success_count == total_tools

if __name__ == "__main__":
    print("üöÄ D√©marrage validation compl√®te...")
    success = test_mcp_jupyter_complete()
    sys.exit(0 if success else 1)