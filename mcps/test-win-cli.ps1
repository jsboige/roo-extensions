# Script de test pour le serveur win-cli
# Teste si les restrictions de chemin ont √©t√© lev√©es

Write-Host "Test du serveur win-cli - Verification des restrictions de chemin" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan

# Test 1: Commande simple dans le r√©pertoire autoris√©
Write-Host "`n1. Test commande simple dans d:\roo-extensions..." -ForegroundColor Yellow
try {
    $result = powershell.exe -File d:\roo-extensions\mcps\mcp-manager.ps1 status
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Succ√®s - Script ex√©cut√© sans erreur" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå √âchec - Code de sortie: $LASTEXITCODE" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: V√©rification de l'acc√®s au r√©pertoire
Write-Host "`n2. Test acc√®s au r√©pertoire d:\roo-extensions..." -ForegroundColor Yellow
if (Test-Path "d:\roo-extensions") {
    Write-Host "   ‚úÖ R√©pertoire accessible" -ForegroundColor Green
    $items = Get-ChildItem "d:\roo-extensions" | Measure-Object
    Write-Host "   üìÅ Nombre d'√©l√©ments: $($items.Count)" -ForegroundColor White
} else {
    Write-Host "   ‚ùå R√©pertoire non accessible" -ForegroundColor Red
}

# Test 3: V√©rification des sauvegardes
Write-Host "`n3. Test acc√®s aux sauvegardes..." -ForegroundColor Yellow
$backupDir = "d:\roo-extensions\mcps\backups"
if (Test-Path $backupDir) {
    $backups = Get-ChildItem $backupDir -Filter "*.json" | Measure-Object
    Write-Host "   ‚úÖ R√©pertoire de sauvegarde accessible" -ForegroundColor Green
    Write-Host "   üíæ Nombre de sauvegardes: $($backups.Count)" -ForegroundColor White
} else {
    Write-Host "   ‚ùå R√©pertoire de sauvegarde non accessible" -ForegroundColor Red
}

# Test 4: Validation de la configuration MCP
Write-Host "`n4. Test validation configuration MCP..." -ForegroundColor Yellow
$configPath = "$env:APPDATA\Code\User\globalStorage\rooveterinaryinc.roo-cline\settings\mcp_settings.json"
if (Test-Path $configPath) {
    try {
        $content = Get-Content $configPath -Raw -Encoding UTF8
        $config = $content | ConvertFrom-Json
        
        if ($config.security -and $config.security.allowedPaths) {
            $allowedPaths = $config.security.allowedPaths
            if ($allowedPaths -contains "d:\roo-extensions") {
                Write-Host "   ‚úÖ Chemin d:\roo-extensions pr√©sent dans allowedPaths" -ForegroundColor Green
            } else {
                Write-Host "   ‚ùå Chemin d:\roo-extensions manquant dans allowedPaths" -ForegroundColor Red
            }
            
            Write-Host "   üìã Chemins autoris√©s:" -ForegroundColor White
            foreach ($path in $allowedPaths) {
                Write-Host "      - $path" -ForegroundColor Gray
            }
        } else {
            Write-Host "   ‚ö†Ô∏è  Section security.allowedPaths non trouv√©e" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "   ‚ùå Erreur de validation JSON: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "   ‚ùå Fichier de configuration non trouv√©" -ForegroundColor Red
}

Write-Host "`n" -NoNewline
Write-Host "Test termin√© - " -ForegroundColor Cyan -NoNewline
Write-Host "Le serveur win-cli devrait maintenant accepter les commandes dans d:\roo-extensions" -ForegroundColor Green
Write-Host "Red√©marrez VS Code pour que les modifications prennent effet." -ForegroundColor Yellow