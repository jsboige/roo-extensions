# Script de sauvegarde automatique de la configuration MCP
# Utilisation : .\backup-mcp-config.ps1 [restore]

param(
    [string]$Action = "backup"
)

$mcpConfigPath = "C:\Users\MYIA\AppData\Roaming\Code\User\globalStorage\rooveterinaryinc.roo-cline\settings\mcp_settings.json"
$backupDir = "D:\roo-extensions\mcps\backups"
$timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'

# Cr√©er le r√©pertoire de sauvegarde s'il n'existe pas
if (!(Test-Path $backupDir)) {
    New-Item -ItemType Directory -Path $backupDir -Force
    Write-Host "R√©pertoire de sauvegarde cr√©√© : $backupDir" -ForegroundColor Green
}

function Backup-MCPConfig {
    if (Test-Path $mcpConfigPath) {
        $backupPath = "$backupDir\mcp_settings.backup.$timestamp.json"
        Copy-Item $mcpConfigPath $backupPath
        Write-Host "‚úÖ Sauvegarde cr√©√©e : $backupPath" -ForegroundColor Green
        
        # Valider le JSON
        try {
            Get-Content $mcpConfigPath | ConvertFrom-Json | Out-Null
            Write-Host "‚úÖ Configuration JSON valide" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ùå ERREUR : Configuration JSON invalide !" -ForegroundColor Red
            Write-Host $_.Exception.Message -ForegroundColor Red
        }
        
        # Lister les serveurs configur√©s
        $config = Get-Content $mcpConfigPath | ConvertFrom-Json
        Write-Host "`nüìã Serveurs MCP configur√©s :" -ForegroundColor Cyan
        $config.mcpServers.PSObject.Properties | ForEach-Object {
            $status = if ($_.Value.disabled -eq $true) { "‚ùå D√âSACTIV√â" } else { "‚úÖ ACTIV√â" }
            Write-Host "  - $($_.Name): $status" -ForegroundColor White
        }
        
        return $backupPath
    }
    else {
        Write-Host "‚ùå Fichier de configuration MCP introuvable : $mcpConfigPath" -ForegroundColor Red
        return $null
    }
}

function Restore-MCPConfig {
    # Lister les sauvegardes disponibles
    $backups = Get-ChildItem "$backupDir\mcp_settings.backup.*.json" | Sort-Object LastWriteTime -Descending
    
    if ($backups.Count -eq 0) {
        Write-Host "‚ùå Aucune sauvegarde trouv√©e dans $backupDir" -ForegroundColor Red
        return
    }
    
    Write-Host "`nüìã Sauvegardes disponibles :" -ForegroundColor Cyan
    for ($i = 0; $i -lt $backups.Count; $i++) {
        $backup = $backups[$i]
        Write-Host "  [$i] $($backup.Name) - $($backup.LastWriteTime)" -ForegroundColor White
    }
    
    $choice = Read-Host "`nChoisir une sauvegarde √† restaurer (num√©ro)"
    
    if ($choice -match '^\d+$' -and [int]$choice -lt $backups.Count) {
        $selectedBackup = $backups[[int]$choice]
        
        # Cr√©er une sauvegarde de l'√©tat actuel avant restauration
        Write-Host "`nüîÑ Sauvegarde de l'√©tat actuel avant restauration..." -ForegroundColor Yellow
        Backup-MCPConfig | Out-Null
        
        # Restaurer
        Copy-Item $selectedBackup.FullName $mcpConfigPath -Force
        Write-Host "‚úÖ Configuration restaur√©e depuis : $($selectedBackup.Name)" -ForegroundColor Green
        Write-Host "‚ö†Ô∏è  Red√©marrez VSCode pour appliquer les changements" -ForegroundColor Yellow
    }
    else {
        Write-Host "‚ùå Choix invalide" -ForegroundColor Red
    }
}

function Show-MCPStatus {
    if (Test-Path $mcpConfigPath) {
        try {
            $config = Get-Content $mcpConfigPath | ConvertFrom-Json
            Write-Host "`nüìä √âtat des serveurs MCP :" -ForegroundColor Cyan
            
            $config.mcpServers.PSObject.Properties | ForEach-Object {
                $server = $_.Value
                $status = if ($server.disabled -eq $true) { "‚ùå D√âSACTIV√â" } else { "‚úÖ ACTIV√â" }
                $command = "$($server.command) $($server.args -join ' ')"
                
                Write-Host "`nüîß $($_.Name):" -ForegroundColor White
                Write-Host "   Status: $status" -ForegroundColor $(if ($server.disabled -eq $true) { "Red" } else { "Green" })
                Write-Host "   Command: $command" -ForegroundColor Gray
                
                if ($server.cwd) {
                    Write-Host "   Working Dir: $($server.cwd)" -ForegroundColor Gray
                }
                
                if ($server.alwaysAllow) {
                    Write-Host "   Tools: $($server.alwaysAllow.Count) autoris√©s" -ForegroundColor Gray
                }
            }
        }
        catch {
            Write-Host "‚ùå ERREUR : Impossible de lire la configuration MCP" -ForegroundColor Red
            Write-Host $_.Exception.Message -ForegroundColor Red
        }
    }
    else {
        Write-Host "‚ùå Fichier de configuration MCP introuvable" -ForegroundColor Red
    }
}

# Ex√©cution selon l'action demand√©e
switch ($Action.ToLower()) {
    "backup" {
        Write-Host "üîÑ Sauvegarde de la configuration MCP..." -ForegroundColor Cyan
        Backup-MCPConfig
    }
    "restore" {
        Write-Host "üîÑ Restauration de la configuration MCP..." -ForegroundColor Cyan
        Restore-MCPConfig
    }
    "status" {
        Show-MCPStatus
    }
    default {
        Write-Host @"
üõ†Ô∏è  Script de gestion des configurations MCP

Usage:
  .\backup-mcp-config.ps1 backup   - Cr√©er une sauvegarde
  .\backup-mcp-config.ps1 restore  - Restaurer depuis une sauvegarde
  .\backup-mcp-config.ps1 status   - Afficher l'√©tat des serveurs MCP

Exemples:
  .\backup-mcp-config.ps1           # Sauvegarde par d√©faut
  .\backup-mcp-config.ps1 restore   # Restauration interactive
  .\backup-mcp-config.ps1 status    # √âtat des serveurs
"@ -ForegroundColor Yellow
    }
}