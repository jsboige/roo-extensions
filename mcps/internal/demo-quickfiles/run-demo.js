#!/usr/bin/env node
import * as fs from 'fs/promises';
import * as path from 'path';
import { fileURLToPath } from 'url';
import { spawn } from 'child_process';
import readline from 'readline';

// Obtenir le chemin du r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Couleurs pour la console
const COLORS = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
};

// Cr√©er une interface readline pour l'interaction avec l'utilisateur
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fonction pour poser une question et attendre la r√©ponse
function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

// Fonction pour ex√©cuter une commande et attendre sa fin
function executeCommand(command, args = [], cwd = process.cwd()) {
  return new Promise((resolve, reject) => {
    console.log(`${COLORS.blue}Ex√©cution de la commande: ${command} ${args.join(' ')}${COLORS.reset}`);
    
    const childProcess = spawn(command, args, {
      cwd,
      stdio: 'inherit',
      shell: true
    });
    
    childProcess.on('close', code => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`La commande a √©chou√© avec le code ${code}`));
      }
    });
    
    childProcess.on('error', error => {
      reject(error);
    });
  });
}

// Fonction principale pour ex√©cuter la d√©monstration
async function runDemo() {
  console.log(`${COLORS.cyan}${COLORS.bold}=== D√âMONSTRATION DU MCP QUICKFILES ===${COLORS.reset}`);
  console.log(`${COLORS.yellow}Cette d√©monstration vous guidera √† travers les fonctionnalit√©s du MCP QuickFiles.${COLORS.reset}`);
  
  try {
    // V√©rifier si le serveur MCP QuickFiles est en cours d'ex√©cution
    console.log(`\n${COLORS.cyan}√âtape 1: V√©rification du serveur MCP QuickFiles${COLORS.reset}`);
    console.log(`V√©rifions si le serveur MCP QuickFiles est en cours d'ex√©cution...`);
    
    // Dans un environnement r√©el, on v√©rifierait si le serveur est en cours d'ex√©cution
    // Pour cette d√©monstration, nous supposons qu'il est d√©j√† en cours d'ex√©cution
    console.log(`${COLORS.green}‚úì Le serveur MCP QuickFiles est en cours d'ex√©cution.${COLORS.reset}`);
    
    // Configurer l'environnement de d√©monstration
    console.log(`\n${COLORS.cyan}√âtape 2: Configuration de l'environnement de d√©monstration${COLORS.reset}`);
    console.log(`Cr√©ation des fichiers et r√©pertoires n√©cessaires pour la d√©monstration...`);
    
    await executeCommand('node', ['demo-setup.js'], path.join(__dirname));
    console.log(`${COLORS.green}‚úì Environnement de d√©monstration configur√© avec succ√®s.${COLORS.reset}`);
    
    // Menu principal
    let exit = false;
    while (!exit) {
      console.log(`\n${COLORS.cyan}${COLORS.bold}=== MENU PRINCIPAL ===${COLORS.reset}`);
      console.log(`${COLORS.yellow}Choisissez une option :${COLORS.reset}`);
      console.log(`1. D√©monstration compl√®te du MCP QuickFiles`);
      console.log(`2. D√©monstration de read_multiple_files`);
      console.log(`3. D√©monstration de list_directory_contents`);
      console.log(`4. D√©monstration de edit_multiple_files`);
      console.log(`5. D√©monstration de delete_files`);
      console.log(`6. Afficher le README`);
      console.log(`0. Quitter`);
      
      const choice = await question(`\nVotre choix (0-6): `);
      
      switch (choice) {
        case '1':
          await runFullDemo();
          break;
        case '2':
          await runReadMultipleFilesDemo();
          break;
        case '3':
          await runListDirectoryContentsDemo();
          break;
        case '4':
          await runEditMultipleFilesDemo();
          break;
        case '5':
          await runDeleteFilesDemo();
          break;
        case '6':
          await showReadme();
          break;
        case '0':
          exit = true;
          break;
        default:
          console.log(`${COLORS.red}Option invalide. Veuillez r√©essayer.${COLORS.reset}`);
      }
    }
    
    // Nettoyer l'environnement de d√©monstration
    console.log(`\n${COLORS.cyan}Nettoyage de l'environnement de d√©monstration${COLORS.reset}`);
    try {
      await fs.rm(path.join(__dirname, 'demo-files'), { recursive: true, force: true });
      console.log(`${COLORS.green}‚úì Environnement de d√©monstration nettoy√© avec succ√®s.${COLORS.reset}`);
    } catch (error) {
      console.log(`${COLORS.yellow}Note: Le dossier de d√©monstration n'a pas pu √™tre supprim√©. Il sera conserv√© pour r√©f√©rence future.${COLORS.reset}`);
    }
    
    console.log(`\n${COLORS.green}${COLORS.bold}=== FIN DE LA D√âMONSTRATION ===${COLORS.reset}`);
    console.log(`${COLORS.yellow}Merci d'avoir utilis√© la d√©monstration du MCP QuickFiles !${COLORS.reset}`);
  } catch (error) {
    console.error(`${COLORS.red}Erreur lors de la d√©monstration: ${error.message}${COLORS.reset}`);
  } finally {
    rl.close();
  }
}

// Fonction pour ex√©cuter la d√©monstration compl√®te
async function runFullDemo() {
  console.log(`\n${COLORS.cyan}${COLORS.bold}=== D√âMONSTRATION COMPL√àTE DU MCP QUICKFILES ===${COLORS.reset}`);
  console.log(`${COLORS.yellow}Cette d√©monstration va vous montrer toutes les fonctionnalit√©s du MCP QuickFiles.${COLORS.reset}`);
  
  await executeCommand('node', ['demo-quickfiles-mcp.js'], path.join(__dirname));
  
  await question(`\n${COLORS.green}D√©monstration compl√®te termin√©e. Appuyez sur Entr√©e pour continuer...${COLORS.reset}`);
}

// Fonction pour d√©montrer read_multiple_files
async function runReadMultipleFilesDemo() {
  console.log(`\n${COLORS.cyan}${COLORS.bold}=== D√âMONSTRATION DE READ_MULTIPLE_FILES ===${COLORS.reset}`);
  console.log(`${COLORS.yellow}Cette fonctionnalit√© permet de lire plusieurs fichiers en une seule requ√™te.${COLORS.reset}`);
  
  console.log(`\n${COLORS.blue}Fonctionnalit√©s d√©montr√©es :${COLORS.reset}`);
  console.log(`1. Lecture de plusieurs fichiers √† la fois`);
  console.log(`2. Limitation du nombre de lignes par fichier`);
  console.log(`3. Extraction d'extraits sp√©cifiques de fichiers`);
  console.log(`4. Affichage des num√©ros de ligne`);
  
  // Afficher le contenu des fichiers de d√©monstration
  console.log(`\n${COLORS.blue}Contenu des fichiers de d√©monstration :${COLORS.reset}`);
  try {
    const document = await fs.readFile(path.join(__dirname, 'demo-files', 'document.txt'), 'utf-8');
    const tasks = await fs.readFile(path.join(__dirname, 'demo-files', 'tasks.txt'), 'utf-8');
    
    console.log(`\ndocument.txt :\n${document}`);
    console.log(`\ntasks.txt :\n${tasks}`);
  } catch (error) {
    console.log(`${COLORS.red}Erreur lors de la lecture des fichiers: ${error.message}${COLORS.reset}`);
  }
  
  console.log(`\n${COLORS.blue}Exemple d'utilisation de read_multiple_files :${COLORS.reset}`);
  console.log(`
const result = await useMcpTool({
  server_name: "quickfiles",
  tool_name: "read_multiple_files",
  arguments: {
    paths: [
      "./demo-quickfiles/demo-files/document.txt",
      "./demo-quickfiles/demo-files/tasks.txt"
    ],
    show_line_numbers: true,
    max_lines_per_file: 100
  }
});
  `);
  
  await question(`\n${COLORS.green}D√©monstration de read_multiple_files termin√©e. Appuyez sur Entr√©e pour continuer...${COLORS.reset}`);
}

// Fonction pour d√©montrer list_directory_contents
async function runListDirectoryContentsDemo() {
  console.log(`\n${COLORS.cyan}${COLORS.bold}=== D√âMONSTRATION DE LIST_DIRECTORY_CONTENTS ===${COLORS.reset}`);
  console.log(`${COLORS.yellow}Cette fonctionnalit√© permet de lister le contenu d'un ou plusieurs r√©pertoires.${COLORS.reset}`);
  
  console.log(`\n${COLORS.blue}Fonctionnalit√©s d√©montr√©es :${COLORS.reset}`);
  console.log(`1. Listage r√©cursif ou non r√©cursif`);
  console.log(`2. Filtrage par motif de fichier (ex: *.txt)`);
  console.log(`3. Tri par nom, taille, date de modification ou type`);
  console.log(`4. Limitation du nombre de lignes dans la sortie`);
  
  // Afficher la structure des r√©pertoires de d√©monstration
  console.log(`\n${COLORS.blue}Structure des r√©pertoires de d√©monstration :${COLORS.reset}`);
  try {
    const files = await fs.readdir(path.join(__dirname, 'demo-files'), { withFileTypes: true });
    
    for (const file of files) {
      if (file.isDirectory()) {
        console.log(`üìÅ ${file.name}/`);
      } else {
        console.log(`üìÑ ${file.name}`);
      }
    }
  } catch (error) {
    console.log(`${COLORS.red}Erreur lors de la lecture du r√©pertoire: ${error.message}${COLORS.reset}`);
  }
  
  console.log(`\n${COLORS.blue}Exemple d'utilisation de list_directory_contents :${COLORS.reset}`);
  console.log(`
const result = await useMcpTool({
  server_name: "quickfiles",
  tool_name: "list_directory_contents",
  arguments: {
    paths: [
      { 
        path: "./demo-quickfiles/demo-files", 
        recursive: true,
        file_pattern: "*.txt"
      }
    ],
    sort_by: "name",
    sort_order: "asc"
  }
});
  `);
  
  await question(`\n${COLORS.green}D√©monstration de list_directory_contents termin√©e. Appuyez sur Entr√©e pour continuer...${COLORS.reset}`);
}

// Fonction pour d√©montrer edit_multiple_files
async function runEditMultipleFilesDemo() {
  console.log(`\n${COLORS.cyan}${COLORS.bold}=== D√âMONSTRATION DE EDIT_MULTIPLE_FILES ===${COLORS.reset}`);
  console.log(`${COLORS.yellow}Cette fonctionnalit√© permet de modifier plusieurs fichiers en une seule op√©ration.${COLORS.reset}`);
  
  console.log(`\n${COLORS.blue}Fonctionnalit√©s d√©montr√©es :${COLORS.reset}`);
  console.log(`1. Modification de plusieurs fichiers √† la fois`);
  console.log(`2. Application de plusieurs modifications (diffs) √† chaque fichier`);
  
  // Afficher le contenu des fichiers avant modification
  console.log(`\n${COLORS.blue}Contenu des fichiers avant modification :${COLORS.reset}`);
  try {
    const editFile1 = await fs.readFile(path.join(__dirname, 'demo-files', 'edit-file1.txt'), 'utf-8');
    const editFile2 = await fs.readFile(path.join(__dirname, 'demo-files', 'edit-file2.txt'), 'utf-8');
    
    console.log(`\nedit-file1.txt :\n${editFile1}`);
    console.log(`\nedit-file2.txt :\n${editFile2}`);
  } catch (error) {
    console.log(`${COLORS.red}Erreur lors de la lecture des fichiers: ${error.message}${COLORS.reset}`);
  }
  
  console.log(`\n${COLORS.blue}Exemple d'utilisation de edit_multiple_files :${COLORS.reset}`);
  console.log(`
const result = await useMcpTool({
  server_name: "quickfiles",
  tool_name: "edit_multiple_files",
  arguments: {
    files: [
      {
        path: "./demo-quickfiles/demo-files/edit-file1.txt",
        diffs: [
          {
            search: "Texte √† modifier: premi√®re occurrence.",
            replace: "Texte MODIFI√â: premi√®re occurrence."
          },
          {
            search: "Texte √† modifier: deuxi√®me occurrence.",
            replace: "Texte MODIFI√â: deuxi√®me occurrence."
          }
        ]
      },
      {
        path: "./demo-quickfiles/demo-files/edit-file2.txt",
        diffs: [
          {
            search: "Autre texte √† modifier dans un fichier diff√©rent.",
            replace: "Autre texte MODIFI√â dans un fichier diff√©rent."
          }
        ]
      }
    ]
  }
});
  `);
  
  await question(`\n${COLORS.green}D√©monstration de edit_multiple_files termin√©e. Appuyez sur Entr√©e pour continuer...${COLORS.reset}`);
}

// Fonction pour d√©montrer delete_files
async function runDeleteFilesDemo() {
  console.log(`\n${COLORS.cyan}${COLORS.bold}=== D√âMONSTRATION DE DELETE_FILES ===${COLORS.reset}`);
  console.log(`${COLORS.yellow}Cette fonctionnalit√© permet de supprimer plusieurs fichiers en une seule op√©ration.${COLORS.reset}`);
  
  // V√©rifier l'existence des fichiers √† supprimer
  console.log(`\n${COLORS.blue}Fichiers √† supprimer :${COLORS.reset}`);
  try {
    const fileExists1 = await fileExists(path.join(__dirname, 'demo-files', 'to-delete1.tmp'));
    const fileExists2 = await fileExists(path.join(__dirname, 'demo-files', 'to-delete2.tmp'));
    
    console.log(`to-delete1.tmp existe: ${fileExists1 ? 'Oui' : 'Non'}`);
    console.log(`to-delete2.tmp existe: ${fileExists2 ? 'Oui' : 'Non'}`);
  } catch (error) {
    console.log(`${COLORS.red}Erreur lors de la v√©rification des fichiers: ${error.message}${COLORS.reset}`);
  }
  
  console.log(`\n${COLORS.blue}Exemple d'utilisation de delete_files :${COLORS.reset}`);
  console.log(`
const result = await useMcpTool({
  server_name: "quickfiles",
  tool_name: "delete_files",
  arguments: {
    paths: [
      "./demo-quickfiles/demo-files/to-delete1.tmp",
      "./demo-quickfiles/demo-files/to-delete2.tmp"
    ]
  }
});
  `);
  
  await question(`\n${COLORS.green}D√©monstration de delete_files termin√©e. Appuyez sur Entr√©e pour continuer...${COLORS.reset}`);
}

// Fonction pour afficher le README
async function showReadme() {
  console.log(`\n${COLORS.cyan}${COLORS.bold}=== README DU MCP QUICKFILES ===${COLORS.reset}`);
  
  try {
    const readme = await fs.readFile(path.join(__dirname, 'README.md'), 'utf-8');
    console.log(`\n${readme}`);
  } catch (error) {
    console.log(`${COLORS.red}Erreur lors de la lecture du README: ${error.message}${COLORS.reset}`);
  }
  
  await question(`\n${COLORS.green}Appuyez sur Entr√©e pour continuer...${COLORS.reset}`);
}

// Fonction utilitaire pour v√©rifier si un fichier existe
async function fileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

// Ex√©cuter la d√©monstration
runDemo().catch(error => {
  console.error(`${COLORS.red}Erreur non g√©r√©e: ${error.message}${COLORS.reset}`);
  rl.close();
});