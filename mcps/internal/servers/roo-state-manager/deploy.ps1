#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de d√©ploiement pour le MCP Roo State Manager

.DESCRIPTION
    Ce script automatise l'installation, la compilation et les tests du MCP Roo State Manager.
    Il peut √©galement configurer le serveur dans la configuration MCP globale.

.PARAMETER Install
    Installe les d√©pendances npm

.PARAMETER Build
    Compile le projet TypeScript

.PARAMETER Test
    Lance les tests de validation

.PARAMETER Deploy
    Effectue une installation compl√®te (install + build + test)

.PARAMETER ConfigureMCP
    Ajoute le serveur √† la configuration MCP (n√©cessite des privil√®ges)

.EXAMPLE
    .\deploy.ps1 -Deploy
    Effectue une installation compl√®te

.EXAMPLE
    .\deploy.ps1 -Install -Build -Test
    Installe, compile et teste s√©par√©ment
#>

param(
    [switch]$Install,
    [switch]$Build,
    [switch]$Test,
    [switch]$Deploy,
    [switch]$ConfigureMCP,
    [switch]$Help
)

# Couleurs pour l'affichage
$Green = "`e[32m"
$Red = "`e[31m"
$Yellow = "`e[33m"
$Blue = "`e[34m"
$Reset = "`e[0m"

function Write-Success($message) {
    Write-Host "${Green}‚úÖ $message${Reset}"
}

function Write-Error($message) {
    Write-Host "${Red}‚ùå $message${Reset}"
}

function Write-Warning($message) {
    Write-Host "${Yellow}‚ö†Ô∏è  $message${Reset}"
}

function Write-Info($message) {
    Write-Host "${Blue}‚ÑπÔ∏è  $message${Reset}"
}

function Show-Help {
    Write-Host @"
${Blue}üöÄ Script de d√©ploiement MCP Roo State Manager${Reset}

${Yellow}UTILISATION:${Reset}
    .\deploy.ps1 [OPTIONS]

${Yellow}OPTIONS:${Reset}
    -Install        Installe les d√©pendances npm
    -Build          Compile le projet TypeScript
    -Test           Lance les tests de validation
    -Deploy         Installation compl√®te (install + build + test)
    -ConfigureMCP   Configure le serveur dans MCP (exp√©rimental)
    -Help           Affiche cette aide

${Yellow}EXEMPLES:${Reset}
    .\deploy.ps1 -Deploy                    # Installation compl√®te
    .\deploy.ps1 -Install -Build -Test      # √âtapes s√©par√©es
    .\deploy.ps1 -Test                      # Tests uniquement

${Yellow}PR√âREQUIS:${Reset}
    - Node.js 18+ install√©
    - npm disponible dans le PATH
    - PowerShell 5.1+ ou PowerShell Core 7+
"@
}

function Test-Prerequisites {
    Write-Info "V√©rification des pr√©requis..."
    
    # V√©rification de Node.js
    try {
        $nodeVersion = node --version
        Write-Success "Node.js d√©tect√©: $nodeVersion"
    } catch {
        Write-Error "Node.js n'est pas install√© ou non disponible dans le PATH"
        return $false
    }
    
    # V√©rification de npm
    try {
        $npmVersion = npm --version
        Write-Success "npm d√©tect√©: $npmVersion"
    } catch {
        Write-Error "npm n'est pas install√© ou non disponible dans le PATH"
        return $false
    }
    
    return $true
}

function Install-Dependencies {
    Write-Info "Installation des d√©pendances npm..."
    
    try {
        npm install
        if ($LASTEXITCODE -eq 0) {
            Write-Success "D√©pendances install√©es avec succ√®s"
            return $true
        } else {
            Write-Error "Erreur lors de l'installation des d√©pendances"
            return $false
        }
    } catch {
        Write-Error "Erreur lors de l'installation: $($_.Exception.Message)"
        return $false
    }
}

function Build-Project {
    Write-Info "Compilation du projet TypeScript..."
    
    try {
        npm run build
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Compilation r√©ussie"
            return $true
        } else {
            Write-Error "Erreur lors de la compilation"
            return $false
        }
    } catch {
        Write-Error "Erreur lors de la compilation: $($_.Exception.Message)"
        return $false
    }
}

function Test-Project {
    Write-Info "Lancement des tests de validation..."
    
    try {
        npm run test:detector
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Tests r√©ussis"
            return $true
        } else {
            Write-Error "Erreur lors des tests"
            return $false
        }
    } catch {
        Write-Error "Erreur lors des tests: $($_.Exception.Message)"
        return $false
    }
}

function Configure-MCP {
    Write-Warning "Configuration MCP automatique non encore impl√©ment√©e"
    Write-Info "Pour configurer manuellement, ajoutez ceci √† votre configuration MCP:"
    Write-Host @"
${Yellow}{
  "mcpServers": {
    "roo-state-manager": {
      "command": "node",
      "args": ["$(Get-Location)\build\index.js"]
    }
  }
}${Reset}
"@
}

function Main {
    Write-Host "${Blue}üöÄ D√©ploiement MCP Roo State Manager${Reset}`n"
    
    if ($Help) {
        Show-Help
        return
    }
    
    # V√©rification des pr√©requis
    if (-not (Test-Prerequisites)) {
        Write-Error "Pr√©requis non satisfaits. Arr√™t du d√©ploiement."
        exit 1
    }
    
    $success = $true
    
    # Mode d√©ploiement complet
    if ($Deploy) {
        $Install = $true
        $Build = $true
        $Test = $true
    }
    
    # Si aucune option sp√©cifi√©e, afficher l'aide
    if (-not ($Install -or $Build -or $Test -or $ConfigureMCP)) {
        Show-Help
        return
    }
    
    # Installation des d√©pendances
    if ($Install) {
        if (-not (Install-Dependencies)) {
            $success = $false
        }
    }
    
    # Compilation
    if ($Build -and $success) {
        if (-not (Build-Project)) {
            $success = $false
        }
    }
    
    # Tests
    if ($Test -and $success) {
        if (-not (Test-Project)) {
            $success = $false
        }
    }
    
    # Configuration MCP
    if ($ConfigureMCP) {
        Configure-MCP
    }
    
    # R√©sum√© final
    Write-Host "`n${Blue}üìã R√âSUM√â DU D√âPLOIEMENT${Reset}"
    if ($success) {
        Write-Success "D√©ploiement termin√© avec succ√®s!"
        Write-Info "Le serveur MCP Roo State Manager est pr√™t √† √™tre utilis√©."
        Write-Info "Chemin du serveur: $(Get-Location)\build\index.js"
    } else {
        Write-Error "Le d√©ploiement a √©chou√©. V√©rifiez les erreurs ci-dessus."
        exit 1
    }
}

# Point d'entr√©e
Main