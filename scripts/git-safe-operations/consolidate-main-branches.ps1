<#
.SYNOPSIS
    Consolidation compl√®te des branches main (d√©p√¥t principal + sous-modules)
.DESCRIPTION
    Script autonome pour merger les branches main avec gestion intelligente des conflits
.PARAMETER DryRun
    Mode simulation sans modifications r√©elles
#>

param(
    [switch]$DryRun = $false
)

$ErrorActionPreference = "Stop"
$script:RootDir = $PWD.Path
$script:LogFile = Join-Path $script:RootDir "scripts/git-safe-operations/consolidation-main-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Write-Host $logEntry
    Add-Content -Path $script:LogFile -Value $logEntry
}

function Write-Section {
    param([string]$Title)
    Write-Host "`n" -NoNewline
    Write-Host "="*80 -ForegroundColor Cyan
    Write-Host "  $Title" -ForegroundColor Yellow
    Write-Host "="*80 -ForegroundColor Cyan
    Write-Log "=== $Title ==="
}

function Test-GitClean {
    param([string]$Context = ".")
    Push-Location $Context
    $status = git status --porcelain
    Pop-Location
    return [string]::IsNullOrWhiteSpace($status)
}

function Get-GitDivergence {
    param([string]$Context = ".")
    Push-Location $Context
    $ahead = (git rev-list --count origin/main..HEAD)
    $behind = (git rev-list --count HEAD..origin/main)
    Pop-Location
    return @{
        Ahead = [int]$ahead
        Behind = [int]$behind
    }
}

function Show-DiffStats {
    param([string]$Context = ".", [string]$Label = "")
    Push-Location $Context
    Write-Host "`n--- Commits distants √† r√©cup√©rer ($Label) ---" -ForegroundColor Yellow
    git log HEAD..origin/main --oneline --decorate
    Write-Host "`n--- Statistiques des diff√©rences ($Label) ---" -ForegroundColor Yellow
    git diff HEAD origin/main --stat
    Pop-Location
}

function Invoke-SafeMerge {
    param(
        [string]$Context = ".",
        [string]$Label = "",
        [switch]$SubmoduleMode = $false
    )
    
    Push-Location $Context
    Write-Section "MERGE: $Label"
    
    if ($DryRun) {
        Write-Host "[DRY-RUN] Simulation du merge de origin/main" -ForegroundColor Yellow
        git merge origin/main --no-commit --no-ff
        $mergeResult = $LASTEXITCODE
        
        if ($mergeResult -ne 0) {
            Write-Host "`n‚ö†Ô∏è CONFLITS D√âTECT√âS (mode simulation)" -ForegroundColor Red
            git status
            git merge --abort
        } else {
            Write-Host "‚úì Merge r√©ussi (simulation)" -ForegroundColor Green
            git merge --abort
        }
        Pop-Location
        return $mergeResult
    }
    
    # Merge r√©el
    Write-Log "D√©marrage merge: $Label"
    git merge origin/main --no-edit
    $mergeResult = $LASTEXITCODE
    
    if ($mergeResult -ne 0) {
        Write-Host "`n‚ö†Ô∏è CONFLITS D√âTECT√âS" -ForegroundColor Red
        Write-Log "Conflits d√©tect√©s dans: $Label" "WARNING"
        
        $conflicts = git diff --name-only --diff-filter=U
        Write-Host "`nFichiers en conflit:" -ForegroundColor Yellow
        $conflicts | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
        
        Write-Host "`nüìã Analyse des conflits..." -ForegroundColor Cyan
        
        foreach ($file in $conflicts) {
            Write-Host "`n--- Conflit: $file ---" -ForegroundColor Yellow
            
            # Strat√©gies sp√©cifiques
            if ($file -match "roo-storage-detector\.ts") {
                Write-Host "  Strat√©gie: Conserver NOTRE version (refactoring pr√©vu)" -ForegroundColor Cyan
                git checkout --ours $file
                git add $file
                Write-Log "R√©solution conflit $file : version locale conserv√©e"
            }
            elseif ($file -match "package\.json") {
                Write-Host "  Strat√©gie: Fusion manuelle n√©cessaire (d√©pendances)" -ForegroundColor Yellow
                Write-Host "  ‚ö†Ô∏è N√©cessite votre intervention manuelle" -ForegroundColor Red
                Write-Log "R√©solution conflit $file : intervention manuelle requise" "WARNING"
            }
            else {
                Write-Host "  Strat√©gie: Analyse contextuelle n√©cessaire" -ForegroundColor Yellow
                # Afficher le contexte du conflit
                git diff $file | Select-Object -First 50
                Write-Host "  ‚ö†Ô∏è N√©cessite votre intervention manuelle" -ForegroundColor Red
                Write-Log "R√©solution conflit $file : intervention manuelle requise" "WARNING"
            }
        }
        
        # V√©rifier s'il reste des conflits non r√©solus
        $remainingConflicts = git diff --name-only --diff-filter=U
        if ($remainingConflicts) {
            Write-Host "`n‚ö†Ô∏è Conflits non r√©solus automatiquement:" -ForegroundColor Red
            $remainingConflicts | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
            Write-Host "`nüìù PAUSE: R√©solvez manuellement ces conflits, puis relancez le script" -ForegroundColor Yellow
            Pop-Location
            exit 1
        }
        
        # Finaliser le merge si tous les conflits sont r√©solus
        git commit --no-edit
        Write-Host "‚úì Merge compl√©t√© avec r√©solution de conflits" -ForegroundColor Green
        Write-Log "Merge compl√©t√©: $Label (avec r√©solution de conflits)"
    }
    else {
        Write-Host "‚úì Merge r√©ussi sans conflits" -ForegroundColor Green
        Write-Log "Merge compl√©t√©: $Label (sans conflits)"
    }
    
    Pop-Location
    return 0
}

function Test-Compilation {
    param([string]$Context, [string]$Label)
    
    Push-Location $Context
    Write-Section "VALIDATION: Compilation $Label"
    
    if (!(Test-Path "package.json")) {
        Write-Host "‚ö†Ô∏è Pas de package.json, skip compilation" -ForegroundColor Yellow
        Pop-Location
        return $true
    }
    
    Write-Host "Building..." -ForegroundColor Cyan
    npm run build 2>&1 | Tee-Object -Variable buildOutput
    $buildResult = $LASTEXITCODE
    
    if ($buildResult -eq 0) {
        Write-Host "‚úì Compilation r√©ussie" -ForegroundColor Green
        Write-Log "Compilation r√©ussie: $Label"
        Pop-Location
        return $true
    }
    else {
        Write-Host "‚úó Erreur de compilation" -ForegroundColor Red
        Write-Log "Erreur de compilation: $Label" "ERROR"
        Pop-Location
        return $false
    }
}

# ============================================================================
# D√âBUT DU SCRIPT PRINCIPAL
# ============================================================================

Write-Section "CONSOLIDATION BRANCHES MAIN - D√âMARRAGE"
Write-Log "Script d√©marr√© (DryRun: $DryRun)"

# V√©rification de l'√©tat initial
if (!(Test-GitClean ".")) {
    Write-Host "‚ö†Ô∏è ERREUR: Working tree non propre" -ForegroundColor Red
    git status
    exit 1
}

# PHASE 1: Analyse initiale
Write-Section "PHASE 1: Analyse de l'√©tat actuel"

$mainDiv = Get-GitDivergence "."
$submoduleDiv = Get-GitDivergence "mcps/internal"

Write-Host "`nD√©p√¥t principal:" -ForegroundColor Cyan
Write-Host "  Commits locaux (ahead):  $($mainDiv.Ahead)" -ForegroundColor Yellow
Write-Host "  Commits distants (behind): $($mainDiv.Behind)" -ForegroundColor Yellow

Write-Host "`nSous-module mcps/internal:" -ForegroundColor Cyan
Write-Host "  Commits locaux (ahead):  $($submoduleDiv.Ahead)" -ForegroundColor Yellow
Write-Host "  Commits distants (behind): $($submoduleDiv.Behind)" -ForegroundColor Yellow

# PHASE 2: Fetch
Write-Section "PHASE 2: Fetch des changements distants"
git fetch origin
Push-Location mcps/internal
git fetch origin
Pop-Location
Write-Host "‚úì Fetch compl√©t√©" -ForegroundColor Green

# PHASE 3: Affichage des diff√©rences
Write-Section "PHASE 3: Analyse des diff√©rences"
Show-DiffStats "." "D√©p√¥t principal"
Show-DiffStats "mcps/internal" "Sous-module mcps/internal"

# PHASE 4: Merge sous-module
$submoduleMergeResult = Invoke-SafeMerge -Context "mcps/internal" -Label "Sous-module mcps/internal" -SubmoduleMode

if ($submoduleMergeResult -ne 0 -and !$DryRun) {
    Write-Host "`n‚ö†Ô∏è Le merge du sous-module a √©chou√© ou n√©cessite une intervention" -ForegroundColor Red
    exit 1
}

# PHASE 5: Merge d√©p√¥t principal
$mainMergeResult = Invoke-SafeMerge -Context "." -Label "D√©p√¥t principal"

if ($mainMergeResult -ne 0 -and !$DryRun) {
    Write-Host "`n‚ö†Ô∏è Le merge du d√©p√¥t principal a √©chou√© ou n√©cessite une intervention" -ForegroundColor Red
    exit 1
}

# PHASE 6: Mise √† jour r√©f√©rence sous-module
if (!$DryRun) {
    Write-Section "PHASE 6: Mise √† jour r√©f√©rence sous-module"
    
    $submoduleChanged = git diff --name-only | Select-String "mcps/internal"
    if ($submoduleChanged) {
        Write-Host "Mise √† jour de la r√©f√©rence du sous-module..." -ForegroundColor Cyan
        git add mcps/internal
        git commit -m "chore: Update mcps/internal submodule after main merge"
        Write-Host "‚úì R√©f√©rence mise √† jour" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è Aucune modification de r√©f√©rence d√©tect√©e" -ForegroundColor Yellow
    }
}

# PHASE 7: Validation compilation
Write-Section "PHASE 7: Validation de la compilation"

$compilationOK = $true

# Test roo-state-manager
if (Test-Path "mcps/internal/servers/roo-state-manager") {
    if (!(Test-Compilation "mcps/internal/servers/roo-state-manager" "roo-state-manager")) {
        $compilationOK = $false
    }
}

# Test jupyter-papermill si modifi√©
if (Test-Path "mcps/internal/servers/jupyter-papermill") {
    if (!(Test-Compilation "mcps/internal/servers/jupyter-papermill" "jupyter-papermill")) {
        $compilationOK = $false
    }
}

# PHASE 8: Tests unitaires
if (!$DryRun -and $compilationOK) {
    Write-Section "PHASE 8: Ex√©cution des tests unitaires"
    
    Push-Location "mcps/internal/servers/roo-state-manager"
    if (Test-Path "package.json") {
        Write-Host "Lancement des tests..." -ForegroundColor Cyan
        npm test 2>&1 | Tee-Object -Variable testOutput
        $testResult = $LASTEXITCODE
        
        if ($testResult -eq 0) {
            Write-Host "‚úì Tests r√©ussis" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è Certains tests ont √©chou√© (√† v√©rifier)" -ForegroundColor Yellow
        }
    }
    Pop-Location
}

# RAPPORT FINAL
Write-Section "RAPPORT FINAL"

Write-Host "`nüìä √âtat final:" -ForegroundColor Cyan
Write-Host "`nD√©p√¥t principal (derniers commits):" -ForegroundColor Yellow
git log --oneline -5

Write-Host "`nSous-module mcps/internal (derniers commits):" -ForegroundColor Yellow
Push-Location mcps/internal
git log --oneline -5
Pop-Location

Write-Host "`n‚úÖ CONSOLIDATION TERMIN√âE" -ForegroundColor Green
Write-Host "üìÑ Log complet: $script:LogFile" -ForegroundColor Cyan
Write-Log "Script termin√© avec succ√®s"

if ($DryRun) {
    Write-Host "`n‚ö†Ô∏è MODE DRY-RUN: Aucune modification n'a √©t√© effectu√©e" -ForegroundColor Yellow
}