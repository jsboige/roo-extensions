import fs from 'fs';
import path from 'path';

// Pour tester les fonctions du syst√®me, nous devons les copier directement
// car elles sont dans des modules ES

/**
 * Fonction de normalisation des instructions (copi√©e depuis task-instruction-index.ts)
 */
function computeInstructionPrefix(raw, K = 192) {
    if (!raw) return '';

    // Normalisations robustes avant troncature
    let s = String(raw);

    // 1) Retirer un √©ventuel BOM UTF-8 en t√™te
    s = s.replace(/^\uFEFF/, '');

    // 2) D√©-√©chappements simples courants (contenus provenant de JSON √©chapp√©)
    //    Ne pas faire de parsing JSON ici pour rester ultra-robuste
    s = s
        .replace(/\\r\\n/g, '\n')
        .replace(/\\n/g, '\n')
        .replace(/\\t/g, '\t')
        .replace(/\\\\/g, '\\')
        .replace(/\\"/g, '"')
        .replace(/\\'/g, "'");

    // 3) D√©codage des entit√©s HTML (nomm√©es + num√©riques)
    // Ordre important pour √©viter double-d√©codage
    s = s
        .replace(/</gi, '<')
        .replace(/>/gi, '>')
        .replace(/"/gi, '"')
        .replace(/'/gi, "'")
        .replace(/'/gi, "'")
        .replace(/&/gi, '&');

    // Entit√©s num√©riques d√©cimales
    s = s.replace(/&#(\d+);/g, (_m, d) => {
        const code = parseInt(d, 10);
        return Number.isFinite(code) ? String.fromCharCode(code) : _m;
    });
    // Entit√©s num√©riques hexad√©cimales
    s = s.replace(/&#x([0-9a-fA-F]+);/g, (_m, h) => {
        const code = parseInt(h, 16);
        return Number.isFinite(code) ? String.fromCharCode(code) : _m;
    });

    // 4) Nettoyer les restes de JSON du parsing parent (content:", etc.)
    s = s
        .replace(/^["']?content["']?\s*:\s*["']?/i, '')  // Enlever "content": ou 'content': au d√©but
        .replace(/["']$/,'');  // Enlever guillemet final √©ventuel

    // 5) Supprimer explicitement les balises de d√©l√©gation fr√©quemment vues
    //    et les wrappers <task> / <new_task> m√™me non ferm√©s
    s = s
        .replace(/<\s*task\s*>/gi, ' ')
        .replace(/<\s*\/\s*task\s*>/gi, ' ')
        .replace(/<\s*new_task\b[^>]*>/gi, ' ')
        .replace(/<\s*\/\s*new_task\s*>/gi, ' ');

    // 6) Purge g√©n√©rique de toutes les balises HTML/XML restantes
    s = s.replace(/<[^>]+>/g, ' ');

    // 7) Normalisations finales, minuscules + espaces
    s = s
        .toLowerCase()
        .replace(/\s+/g, ' ')
        .trim();

    // 8) Troncature √† K
    // ATTENTION: Ne pas faire de trim() apr√®s substring() car cela change la longueur !
    // On fait le trim() AVANT pour normaliser, mais pas APR√àS pour pr√©server K
    const truncated = s.substring(0, K);
    
    // Si le dernier caract√®re est un espace, on peut le garder ou le supprimer
    // Pour coh√©rence avec les tests, on le supprime SEULEMENT si c'est le dernier
    return truncated.trimEnd();
}

// Simuler la structure de exact-trie pour le test
class SimpleTrie {
    constructor() {
        this.entries = new Map();
    }
    
    put(key, value) {
        this.entries.set(key, value);
    }
    
    get(key) {
        return this.entries.get(key);
    }
    
    getWithCheckpoints(searchKey) {
        // Pour ce test simple, on cherche une correspondance exacte
        // dans la vraie impl√©mentation, cela ferait du longest prefix match
        return this.entries.get(searchKey);
    }
}

console.log('üîç D√âBUT DEBUG MATCHING HIERARCHIQUE');
console.log('');

// Instructions des deux t√¢ches
const parentInstruction = "Bonjour,\n\n**Mission :**\nValider √† nouveau le fonctionnement complet du serveur `github-projects-mcp` apr√®s la recompilation.\n\n**Contexte :**\nLe code a √©t√© refactoris√© pour initialiser le client...";
const childInstruction = "Bonjour. Nous sommes √† la derni√®re √©tape de la r√©solution d'un probl√®me critique de stabilit√© de l'extension Roo. Apr√®s une refactorisation majeure, votre mission est de valider que la solution est efficace et que le probl√®me originel est bien corrig√©.";

console.log('üìã INSTRUCTIONS ORIGINALES:');
console.log('Parent (cb7e564f):', parentInstruction.substring(0, 100) + '...');
console.log('Enfant (18141742):', childInstruction.substring(0, 100) + '...');
console.log('');

// Normaliser les pr√©fixes avec la m√™me fonction que le syst√®me
const parentPrefix = computeInstructionPrefix(parentInstruction, 192);
const childPrefix = computeInstructionPrefix(childInstruction, 192);

console.log('üîÑ PR√âFIXES NORMALIS√âS (K=192):');
console.log('Parent:', `"${parentPrefix}"`);
console.log('Enfant:', `"${childPrefix}"`);
console.log('');

// V√©rifier si l'enfant commence par le pr√©fixe du parent
const startsWithMatch = childInstruction.toLowerCase().startsWith(parentPrefix.toLowerCase());
const includesMatch = childInstruction.toLowerCase().includes(parentPrefix.toLowerCase().substring(0, 20)); // 20 premiers chars

console.log('üîç ANALYSE MATCHING:');
console.log('Enfant commence par pr√©fixe parent?', startsWithMatch);
console.log('Enfant contient 20 premiers chars du parent?', includesMatch);
console.log('');

// Cr√©er un trie pour tester la recherche exacte
const trie = new SimpleTrie();
const prefixToEntry = new Map();

// Ajouter le pr√©fixe parent √† l'index
const entry = { parentTaskIds: ['cb7e564f'], instructions: [{ mode: 'debug', message: parentInstruction, timestamp: Date.now() }] };
prefixToEntry.set(parentPrefix, entry);
trie.put(parentPrefix, entry);

console.log('üèóÔ∏è INDEX CR√â√â AVEC PARENT:');
console.log('  - Pr√©fixe index√©:', `"${parentPrefix}"`);
console.log('  - T√¢che parente:', 'cb7e564f');
console.log('');

// Rechercher avec la m√©thode longest prefix match
const searchPrefix = computeInstructionPrefix(childInstruction, 192);
console.log('üîç RECHERCHE AVEC ENFANT:');
console.log('  - Pr√©fixe recherch√©:', `"${searchPrefix}"`);
console.log('');

// M√©thode 1: getWithCheckpoints (comme dans le code r√©el)
const checkpointResult = trie.getWithCheckpoints(searchPrefix);
console.log('üéØ R√âSULTAT getWithCheckpoints():');
if (checkpointResult) {
    console.log('  - Trouv√©:', 'OUI');
    console.log('  - T√¢ches parentes:', checkpointResult.parentTaskIds);
} else {
    console.log('  - Trouv√©:', 'NON');
}

// M√©thode 2: get exact
const exactResult = trie.get(searchPrefix);
console.log('üéØ R√âSULTAT get() exact:');
if (exactResult) {
    console.log('  - Trouv√©:', 'OUI');
    console.log('  - T√¢ches parentes:', exactResult.parentTaskIds);
} else {
    console.log('  - Trouv√©:', 'NON');
}

// M√©thode 3: Comparaison directe des pr√©fixes
const directMatch = searchPrefix.startsWith(parentPrefix) || parentPrefix.startsWith(searchPrefix);
console.log('üéØ COMPARAISON DIRECTE DES PR√âFIXES:');
console.log('  - Les pr√©fixes se correspondent?', directMatch);

console.log('');
console.log('‚ùå CONCLUSION: Aucun matching n\'est possible car les instructions sont fondamentalement diff√©rentes');
console.log('   - Parent: "Bonjour," + "Mission: Valider..."');
console.log('   - Enfant: "Bonjour." + "Nous sommes √† la derni√®re √©tape..."');
console.log('   - Ce sont des instructions diff√©rentes, pas une relation parent-enfant directe via contenu');
console.log('');
console.log('üí° SOLUTION: Le syst√®me doit d√©tecter la relation via l\'appel newTask dans les ui_messages.json');
console.log('   du parent, pas par similarit√© de contenu entre les instructions.');

// Test de la vraie m√©thode d'extraction
console.log('');
console.log('üîß TEST M√âTHODE D\'EXTRACTION DE SOUS-T√ÇCHES:');
console.log('Normalement, le parent devrait contenir un appel newTask avec l\'instruction de l\'enfant');
console.log('Cela devrait √™tre extrait via extractSubtaskInstructions() et index√© s√©par√©ment');