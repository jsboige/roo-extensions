# Localisation du squelette enfant dans tous les emplacements possibles
# Date: 2025-10-22

$ErrorActionPreference = "Stop"
$childTaskId = "18141742-f376-4053-8e1f-804d79daaf6d"

Write-Host "`n=== LOCALISATION SQUELETTE ENFANT ===" -ForegroundColor Cyan
Write-Host "Task ID: $childTaskId`n" -ForegroundColor Yellow

$baseStorage = "$env:APPDATA\Code\User\globalStorage\rooveterinaryinc.roo-cline"

# Emplacements possibles
$possiblePaths = @(
    # Emplacement CORRECT (apr√®s fix)
    "$baseStorage\tasks\.skeletons\$childTaskId.json",
    
    # Emplacement INCORRECT (avant fix - bug du chemin)
    "$baseStorage\.skeletons\$childTaskId.json",
    
    # Autres emplacements potentiels
    "$baseStorage\$childTaskId.json",
    "$baseStorage\tasks\$childTaskId.json"
)

Write-Host "Recherche dans les emplacements possibles :`n" -ForegroundColor Cyan

$foundFiles = @()

foreach ($testPath in $possiblePaths) {
    if (Test-Path $testPath) {
        $file = Get-Item $testPath
        Write-Host "‚úÖ TROUV√â: $testPath" -ForegroundColor Green
        Write-Host "   Taille: $([math]::Round($file.Length/1KB, 2)) KB" -ForegroundColor Gray
        Write-Host "   Modifi√©: $($file.LastWriteTime)" -ForegroundColor Gray
        
        $foundFiles += @{
            Path = $testPath
            Size = $file.Length
            LastWriteTime = $file.LastWriteTime
        }
    }
    else {
        Write-Host "‚ùå Absent: $testPath" -ForegroundColor Red
    }
}

if ($foundFiles.Count -eq 0) {
    Write-Host "`n‚ùå AUCUN fichier squelette trouv√© pour l'enfant !" -ForegroundColor Red
    Write-Host "Le rebuild a probablement √©chou√© silencieusement." -ForegroundColor Yellow
}
elseif ($foundFiles.Count -eq 1) {
    Write-Host "`n‚úÖ Un seul fichier trouv√© (correct)" -ForegroundColor Green
    $file = $foundFiles[0]
    
    # V√©rifier s'il est dans le bon emplacement
    $correctPath = "$baseStorage\tasks\.skeletons\$childTaskId.json"
    if ($file.Path -eq $correctPath) {
        Write-Host "‚úÖ Emplacement CORRECT: tasks\.skeletons\" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è Emplacement INCORRECT: $($file.Path)" -ForegroundColor Yellow
        Write-Host "   Devrait √™tre: $correctPath" -ForegroundColor Gray
        Write-Host "`nüîß RECOMMANDATION: D√©placer le fichier vers le bon emplacement" -ForegroundColor Yellow
    }
    
    # V√©rifier la date de modification
    $daysSinceModified = (Get-Date) - $file.LastWriteTime
    if ($daysSinceModified.TotalDays -gt 1) {
        Write-Host "‚ö†Ô∏è Fichier ancien ($([math]::Round($daysSinceModified.TotalDays, 1)) jours)" -ForegroundColor Yellow
        Write-Host "   Le rebuild r√©cent n'a PAS modifi√© ce fichier !" -ForegroundColor Red
    }
    else {
        Write-Host "‚úÖ Fichier r√©cent (modifi√© aujourd'hui)" -ForegroundColor Green
    }
}
else {
    Write-Host "`n‚ö†Ô∏è PLUSIEURS fichiers trouv√©s (duplicata) !" -ForegroundColor Yellow
    Write-Host "Cela peut causer des incoh√©rences.`n" -ForegroundColor Yellow
    
    # Afficher les d√©tails de tous les fichiers
    for ($i = 0; $i -lt $foundFiles.Count; $i++) {
        $file = $foundFiles[$i]
        Write-Host "Fichier $($i + 1):" -ForegroundColor Cyan
        Write-Host "   Path: $($file.Path)" -ForegroundColor Gray
        Write-Host "   Taille: $([math]::Round($file.Size/1KB, 2)) KB" -ForegroundColor Gray
        Write-Host "   Modifi√©: $($file.LastWriteTime)" -ForegroundColor Gray
    }
}

# Recherche dans TOUS les r√©pertoires (recherche exhaustive)
Write-Host "`n--- Recherche Exhaustive ---" -ForegroundColor Cyan
Write-Host "Scan complet du r√©pertoire globalStorage...`n" -ForegroundColor Yellow

$allMatches = Get-ChildItem -Path $baseStorage -Recurse -Filter "$childTaskId.json" -ErrorAction SilentlyContinue

if ($allMatches) {
    Write-Host "Fichiers trouv√©s lors du scan exhaustif:" -ForegroundColor Green
    foreach ($match in $allMatches) {
        Write-Host "   $($match.FullName)" -ForegroundColor Gray
        Write-Host "     Taille: $([math]::Round($match.Length/1KB, 2)) KB | Modifi√©: $($match.LastWriteTime)" -ForegroundColor DarkGray
    }
}
else {
    Write-Host "‚ùå Aucun fichier trouv√© m√™me avec recherche exhaustive" -ForegroundColor Red
}

Write-Host "`n=== DIAGNOSTIC ===" -ForegroundColor Cyan

if ($foundFiles.Count -eq 0) {
    Write-Host "üî¥ PROBL√àME CRITIQUE: Le squelette enfant n'existe pas" -ForegroundColor Red
    Write-Host "   Cause probable: Le rebuild de l'enfant a √©chou√© sans erreur visible" -ForegroundColor Yellow
    Write-Host "   Solution: Forcer un nouveau rebuild avec force_rebuild=true" -ForegroundColor White
}
elseif ($foundFiles.Count -gt 1) {
    Write-Host "üü° PROBL√àME: Fichiers dupliqu√©s d√©tect√©s" -ForegroundColor Yellow
    Write-Host "   Solution: Supprimer les fichiers dans les mauvais emplacements" -ForegroundColor White
}
else {
    $file = $foundFiles[0]
    $correctPath = "$baseStorage\tasks\.skeletons\$childTaskId.json"
    
    if ($file.Path -ne $correctPath) {
        Write-Host "üü° PROBL√àME: Fichier dans le mauvais emplacement" -ForegroundColor Yellow
        Write-Host "   Solution: D√©placer vers $correctPath" -ForegroundColor White
    }
    
    $daysSinceModified = (Get-Date) - $file.LastWriteTime
    if ($daysSinceModified.TotalDays -gt 1) {
        Write-Host "üî¥ PROBL√àME CRITIQUE: Le rebuild n'a pas modifi√© le fichier" -ForegroundColor Red
        Write-Host "   Cause probable: Phase 3 n'a pas trouv√© le fichier (mauvais chemin)" -ForegroundColor Yellow
        Write-Host "   Solution: Relancer le rebuild apr√®s v√©rification du chemin" -ForegroundColor White
    }
}