const fs = require('fs');
const path = require('path');

// Importer les fonctions n√©cessaires
const { computeInstructionPrefix } = require('../mcps/internal/servers/roo-state-manager/src/utils/task-instruction-index.js');
const Trie = require('exact-trie');

console.log('üîç D√âBUT DEBUG MATCHING HIERARCHIQUE');
console.log('');

// Instructions des deux t√¢ches
const parentInstruction = "Bonjour,\n\n**Mission :**\nValider √† nouveau le fonctionnement complet du serveur `github-projects-mcp` apr√®s la recompilation.\n\n**Contexte :**\nLe code a √©t√© refactoris√© pour initialiser le client...";
const childInstruction = "Bonjour. Nous sommes √† la derni√®re √©tape de la r√©solution d'un probl√®me critique de stabilit√© de l'extension Roo. Apr√®s une refactorisation majeure, votre mission est de valider que la solution est efficace et que le probl√®me originel est bien corrig√©.";

console.log('üìã INSTRUCTIONS ORIGINALES:');
console.log('Parent (cb7e564f):', parentInstruction.substring(0, 100) + '...');
console.log('Enfant (18141742):', childInstruction.substring(0, 100) + '...');
console.log('');

// Normaliser les pr√©fixes avec la m√™me fonction que le syst√®me
const parentPrefix = computeInstructionPrefix(parentInstruction, 192);
const childPrefix = computeInstructionPrefix(childInstruction, 192);

console.log('üîÑ PR√âFIXES NORMALIS√âS (K=192):');
console.log('Parent:', `"${parentPrefix}"`);
console.log('Enfant:', `"${childPrefix}"`);
console.log('');

// V√©rifier si l'enfant commence par le pr√©fixe du parent
const startsWithMatch = childInstruction.toLowerCase().startsWith(parentPrefix.toLowerCase());
const includesMatch = childInstruction.toLowerCase().includes(parentPrefix.toLowerCase().substring(0, 20)); // 20 premiers chars

console.log('üîç ANALYSE MATCHING:');
console.log('Enfant commence par pr√©fixe parent?', startsWithMatch);
console.log('Enfant contient 20 premiers chars du parent?', includesMatch);
console.log('');

// Cr√©er un trie pour tester la recherche exacte
const trie = new Trie();
const prefixToEntry = new Map();

// Ajouter le pr√©fixe parent √† l'index
const entry = { parentTaskIds: ['cb7e564f'], instructions: [{ mode: 'debug', message: parentInstruction, timestamp: Date.now() }] };
prefixToEntry.set(parentPrefix, entry);
trie.put(parentPrefix, entry);

console.log('üèóÔ∏è INDEX CR√â√â AVEC PARENT:');
console.log('  - Pr√©fixe index√©:', `"${parentPrefix}"`);
console.log('  - T√¢che parente:', 'cb7e564f');
console.log('');

// Rechercher avec la m√©thode longest prefix match
const searchPrefix = computeInstructionPrefix(childInstruction, 192);
console.log('üîç RECHERCHE AVEC ENFANT:');
console.log('  - Pr√©fixe recherch√©:', `"${searchPrefix}"`);
console.log('');

// M√©thode 1: getWithCheckpoints (comme dans le code r√©el)
const checkpointResult = trie.getWithCheckpoints(searchPrefix);
console.log('üéØ R√âSULTAT getWithCheckpoints():');
if (checkpointResult) {
    console.log('  - Trouv√©:', 'OUI');
    console.log('  - T√¢ches parentes:', checkpointResult.parentTaskIds);
} else {
    console.log('  - Trouv√©:', 'NON');
}

// M√©thode 2: get exact
const exactResult = trie.get(searchPrefix);
console.log('üéØ R√âSULTAT get() exact:');
if (exactResult) {
    console.log('  - Trouv√©:', 'OUI');
    console.log('  - T√¢ches parentes:', exactResult.parentTaskIds);
} else {
    console.log('  - Trouv√©:', 'NON');
}

// M√©thode 3: Comparaison directe des pr√©fixes
const directMatch = searchPrefix.startsWith(parentPrefix) || parentPrefix.startsWith(searchPrefix);
console.log('üéØ COMPARAISON DIRECTE DES PR√âFIXES:');
console.log('  - Les pr√©fixes se correspondent?', directMatch);

console.log('');
console.log('‚ùå CONCLUSION: Aucun matching n\'est possible car les instructions sont fondamentalement diff√©rentes');
console.log('   - Parent: "Bonjour," + "Mission: Valider..."');
console.log('   - Enfant: "Bonjour." + "Nous sommes √† la derni√®re √©tape..."');
console.log('   - Ce sont des instructions diff√©rentes, pas une relation parent-enfant directe via contenu');
console.log('');
console.log('üí° SOLUTION: Le syst√®me doit d√©tecter la relation via l\'appel newTask dans les ui_messages.json');
console.log('   du parent, pas par similarit√© de contenu entre les instructions.');

// Test de la vraie m√©thode d'extraction
console.log('');
console.log('üîß TEST M√âTHODE D\'EXTRACTION DE SOUS-T√ÇCHES:');
console.log('Normalement, le parent devrait contenir un appel newTask avec l\'instruction de l\'enfant');
console.log('Cela devrait √™tre extrait via extractSubtaskInstructions() et index√© s√©par√©ment');