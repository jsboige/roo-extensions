#Requires -Version 5.1

<#
.SYNOPSIS
    Analyse le r√©pertoire de stockage des t√¢ches Roo pour identifier et rapporter les t√¢ches orphelines.
.DESCRIPTION
    Ce script audite le r√©pertoire o√π l'extension Roo stocke ses donn√©es de t√¢ches.
    Pour chaque t√¢che, il v√©rifie si le workspace d'origine associ√© existe toujours sur le disque.

    Il classifie les t√¢ches en plusieurs cat√©gories :
    - VALIDE : Le workspace associ√© a √©t√© trouv√©.
    - ORPHELIN : Le workspace associ√© n'existe plus.
    - ERREUR_HISTOIRE_MANQUANT : Le fichier 'api_conversation_history.json' est introuvable.
    - ERREUR_PARSING_JSON : Le contenu JSON est invalide ou la structure est inattendue.

    Le script retourne un objet PowerShell pour chaque t√¢che analys√©e, permettant une int√©gration facile avec d'autres outils en pipeline.
.PARAMETER TasksPath
    Sp√©cifie le chemin vers le r√©pertoire 'tasks' de Roo. S'il n'est pas fourni, le script tente de le d√©tecter automatiquement.
.PARAMETER ReportPath
    Si sp√©cifi√©, exporte les r√©sultats d√©taill√©s de l'audit dans un fichier CSV √† l'emplacement indiqu√©.
.PARAMETER Quiet
    Si pr√©sent, supprime la sortie d√©taill√©e en temps r√©el et n'affiche que le r√©sum√© final.
.EXAMPLE
    .\audit-roo-tasks.ps1
    Lance un audit avec d√©tection automatique du chemin et affiche les r√©sultats dans la console.
.EXAMPLE
    .\audit-roo-tasks.ps1 -TasksPath "C:\path\to\tasks" -ReportPath "C:\audits\report.csv"
    Lance un audit sur un chemin sp√©cifique et exporte les r√©sultats dans un fichier CSV.
.EXAMPLE
    .\audit-roo-tasks.ps1 | Where-Object { $_.Status -eq 'ORPHELIN' }
    Retourne uniquement les t√¢ches identifi√©es comme orphelines.
.OUTPUTS
    [PSCustomObject]
    Un objet pour chaque t√¢che, contenant TaskId, Status, WorkspacePath et Details.
#>
[CmdletBinding()]
param(
    [string]$TasksPath,
    [string]$ReportPath,
    [switch]$Quiet
)

function Get-RooTaskStoragePath {
    $defaultPath = Join-Path $env:APPDATA 'Code\User\globalStorage\rooveterinaryinc.roo-cline\tasks'
    if (Test-Path -Path $defaultPath -PathType Container) {
        return $defaultPath
    }
    return $null
}

function Test-RooTaskState {
    param(
        [Parameter(Mandatory = $true)]
        [System.IO.DirectoryInfo]$TaskDirectory
    )

    $historyFilePath = Join-Path -Path $TaskDirectory.FullName -ChildPath 'api_conversation_history.json'
    $taskId = $TaskDirectory.Name

    if (-not (Test-Path -Path $historyFilePath -PathType Leaf)) {
        return [PSCustomObject]@{
            TaskId        = $taskId
            Status        = "ERREUR_HISTOIRE_MANQUANT"
            WorkspacePath = "[N/A]"
            Details       = "Le fichier api_conversation_history.json est introuvable."
        }
    }

    try {
        $historyContent = Get-Content -Path $historyFilePath -Raw | ConvertFrom-Json
        $firstEntry = $historyContent | Select-Object -First 1

        if ($null -eq $firstEntry -or -not $firstEntry.PSObject.Properties.Name -contains 'requestBody' -or [string]::IsNullOrWhiteSpace($firstEntry.requestBody)) {
            return [PSCustomObject]@{
                TaskId        = $taskId
                Status        = "ERREUR_PARSING_JSON"
                WorkspacePath = "[N/A]"
                Details       = "La premi√®re entr√©e de l'historique est vide ou 'requestBody' est manquant."
            }
        }
        
        $initialMessage = $firstEntry.requestBody | ConvertFrom-Json
        $workspacePath = $initialMessage.workspace

        if ([string]::IsNullOrWhiteSpace($workspacePath)) {
             return [PSCustomObject]@{
                TaskId        = $taskId
                Status        = "ERREUR_PARSING_JSON"
                WorkspacePath = "[N/A]"
                Details       = "Le chemin du workspace est vide dans la premi√®re requ√™te."
            }
        }

        if (Test-Path -Path $workspacePath) {
            return [PSCustomObject]@{
                TaskId        = $taskId
                Status        = "VALIDE"
                WorkspacePath = $workspacePath
                Details       = "Le r√©pertoire du workspace existe."
            }
        } else {
            return [PSCustomObject]@{
                TaskId        = $taskId
                Status        = "ORPHELIN"
                WorkspacePath = $workspacePath
                Details       = "Le r√©pertoire du workspace est introuvable."
            }
        }
    }
    catch {
        return [PSCustomObject]@{
            TaskId        = $taskId
            Status        = "ERREUR_PARSING_JSON"
            WorkspacePath = "[N/A]"
            Details       = "Impossible d'analyser le fichier JSON : $($_.Exception.Message)"
        }
    }
}

# --- Point d'entr√©e du Script ---

$OutputEncoding = [System.Text.Encoding]::UTF8

if ([string]::IsNullOrWhiteSpace($TasksPath)) {
    $TasksPath = Get-RooTaskStoragePath
    if (-not $TasksPath) {
        Write-Error "Impossible de trouver le r√©pertoire des t√¢ches Roo. Veuillez sp√©cifier le chemin avec le param√®tre -TasksPath."
        exit 1
    }
}

if (-not (Test-Path -Path $TasksPath -PathType Container)) {
    Write-Error "Le r√©pertoire sp√©cifi√© n'existe pas : $TasksPath"
    exit 1
}

if (-not $Quiet) {
    Write-Host "üîç Audit des t√¢ches Roo dans le r√©pertoire : $TasksPath"
    Write-Host ("-" * 80)
}

$taskDirs = Get-ChildItem -Path $TasksPath -Directory
$totalTasks = $taskDirs.Count
$auditResults = @()

$taskDirs | ForEach-Object -Process {
    $i = [int]$foreach.CurrentIndex + 1
    if (-not $Quiet) {
        Write-Progress -Activity "Analyse des t√¢ches Roo" -Status "Analyse de $($_.Name)" -PercentComplete (($i / $totalTasks) * 100)
    }
    
    $result = Test-RooTaskState -TaskDirectory $_
    
    if (-not $Quiet) {
        $statusColor = switch ($result.Status) {
            "VALIDE"   { "Green" }
            "ORPHELIN" { "Yellow" }
            default    { "Red" }
        }
        Write-Host -NoNewline "T√¢che [$($result.TaskId)]: "
        Write-Host -NoNewline -ForegroundColor $statusColor $result.Status.PadRight(25)
        Write-Host "- $($result.WorkspacePath)"
    }
    
    $auditResults += $result
}

# --- R√©sum√© et Export ---

if ($auditResults.Count -gt 0) {
    $summary = $auditResults | Group-Object -Property Status | Select-Object @{Name = "Statut"; Expression = { $_.Name } }, Count

    Write-Host ("-" * 80)
    Write-Host "üìä R√©sum√© de l'audit :"
    $summary | Format-Table -AutoSize | Out-String | Write-Host
    Write-Host "  - T√¢ches totales analys√©es : $totalTasks"
    Write-Host ("-" * 80)

    if (-not [string]::IsNullOrWhiteSpace($ReportPath)) {
        try {
            $auditResults | Export-Csv -Path $ReportPath -NoTypeInformation -Encoding UTF8 -Delimiter ';'
            Write-Host "‚úÖ Rapport d'audit export√© avec succ√®s vers : $ReportPath"
        }
        catch {
            Write-Warning "Impossible d'exporter le rapport vers '$ReportPath'. Erreur : $($_.Exception.Message)"
        }
    }
} else {
    Write-Host "Aucune t√¢che trouv√©e √† analyser dans le r√©pertoire '$TasksPath'."
}
