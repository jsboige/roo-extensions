#Requires -Version 5.1

<#
.SYNOPSIS
    G√©n√®re un rapport de synth√®se des t√¢ches Roo par r√©pertoire de workspace.
.DESCRIPTION
    Ce script analyse le r√©pertoire des t√¢ches de Roo et regroupe les t√¢ches
    par le workspace auquel elles sont associ√©es. Il affiche ensuite une
    liste de tous les workspaces avec le nombre de t√¢ches correspondantes.
#>
[CmdletBinding()]
param(
    [string]$TasksPath,
    [string]$ReportPath,
    [switch]$Quiet,
    [switch]$AsJson,
    [int]$SampleCount = 0,
    [int]$Offset = 0,
    [int]$Limit = 0
)

function Get-RooTasksPath {
    $defaultPath = Join-Path $env:APPDATA 'Code\User\globalStorage\rooveterinaryinc.roo-cline\tasks'
    if (Test-Path -Path $defaultPath -PathType Container) {
        return $defaultPath
    }
    return $null
}

function Get-TaskWorkspacePath {
    param(
        [System.IO.DirectoryInfo]$TaskDirectory
    )

    # Priorit√© √† l'historique
    $historyFilePath = Join-Path -Path $TaskDirectory.FullName -ChildPath 'api_conversation_history.json'
    if (Test-Path $historyFilePath) {
        try {
            $historyContent = Get-Content -Path $historyFilePath -Raw | ConvertFrom-Json
            foreach ($entry in $historyContent) {
                if ($entry.role -eq 'user' -and $entry.content) {
                    foreach($contentItem in $entry.content) {
                        if($contentItem.type -eq 'text' -and $contentItem.text -like '*Current Workspace Directory*') {
                            try {
                                # Extrait le chemin du workspace de la cha√Æne de texte
                                $workspaceLine = $contentItem.text.Split([Environment]::NewLine) | Where-Object { $_ -like '# Current Workspace Directory*' }
                                if($workspaceLine) {
                                    $match = [regex]::Match($workspaceLine, '\((.*?)\) Files')
                                    if ($match.Success) {
                                        return $match.Groups[1].Value
                                    }
                                }
                            } catch {
                                # On continue si le parsing √©choue
                            }
                        }
                    }
                }
            }
        } catch { $null }
    }

    # Fallback sur les m√©tadonn√©es
    $metadataPath = Join-Path -Path $TaskDirectory.FullName -ChildPath 'task_metadata.json'
    if (Test-Path -Path $metadataPath) {
        try {
            $metadata = Get-Content -Path $metadataPath -Raw | ConvertFrom-Json
            if (-not ([string]::IsNullOrWhiteSpace($metadata.workspace_path))) {
                # Assurer que la sortie est toujours une cha√Æne unique
                $path = $metadata.workspace_path
                if ($path -is [System.Array]) {
                    return $path[0]
                }
                return $path
            }
        } catch { $null }
    }

    return "[Workspace non trouv√©]"
}

# --- Point d'entr√©e ---

$tasksPath = Get-RooTasksPath
if (-not $tasksPath) {
    Write-Error "Le r√©pertoire des t√¢ches Roo est introuvable."
    exit 1
}

# Logique de cache
$cacheFile = Join-Path -Path $PSScriptRoot -ChildPath "audit_cache.json"
$cache = @{}
if (Test-Path $cacheFile) {
    try {
        $cache = Get-Content -Path $cacheFile -Raw | ConvertFrom-Json -AsHashtable
    } catch {}
}
$newCache = @{ LastScan = (Get-Date).ToUniversalTime().ToString("o") }

# Ma logique de diagnostic
$dbMetrics = $null
if (-not $AsJson.IsPresent) {
    Write-Host "--- Lancement du diagnostic de l'√©tat de Roo ---"
    Write-Host ("-" * 80)
    # Note: L'analyse BDD est conserv√©e de ma version
    Write-Host "üìä 1. Analyse de state.vscdb"
    # ... (logique Get-StateVscDbMetrics √† ajouter si n√©cessaire)
    Write-Host ("-" * 80)
    Write-Host "üìÇ 2. Audit du r√©pertoire des t√¢ches : $tasksPath"
}

# Logique de s√©lection de t√¢ches (fusionn√©e)
$allTaskDirs = Get-ChildItem -Path $tasksPath -Directory | Sort-Object -Property CreationTime -Descending
$tasksToProcess = $allTaskDirs

if ($SampleCount -gt 0) {
    $tasksToProcess = $tasksToProcess | Select-Object -First $SampleCount
}
if ($Limit -gt 0) {
    $tasksToProcess = $tasksToProcess | Select-Object -Skip $Offset -First $Limit
}

$auditResults = @()
$sizeMetrics = @{ Total = 0; Json = 0; Checkpoints = 0 }
$totalTasks = $tasksToProcess.Count

$tasksToProcess | ForEach-Object -Process {
    $taskDir = $_
    $taskId = $taskDir.Name
    $lastWriteTime = $taskDir.LastWriteTimeUtc.ToString("o")
    $i = [int]$foreach.CurrentIndex + 1
    
    if (-not $Quiet -and -not $AsJson.IsPresent) {
        Write-Progress -Activity "Analyse des t√¢ches Roo" -Status "Analyse de $($taskDir.Name)" -PercentComplete (($i / $totalTasks) * 100)
    }

    if ($cache.Contains($taskId) -and $cache[$taskId].LastWriteTime -eq $lastWriteTime) {
        $auditResult = $cache[$taskId].Report
        $auditResults += $auditResult
        $newCache[$taskId] = $cache[$taskId]
    } else {
        # Ma logique de diagnostic d√©taill√©e
        $workspacePath = Get-TaskWorkspacePath -TaskDirectory $taskDir
        $status = 'VALIDE'
        if ($workspacePath -eq "[Workspace non trouv√©]" -or -not (Test-Path -Path $workspacePath)) {
            $status = 'WORKSPACE_ORPHELIN'
        }
        
        # Ici, on pourrait ajouter plus de diagnostics comme la taille, etc.
        $report = [PSCustomObject]@{
            TaskId             = $taskId
            InvalidWorkspacePath = if ($status -eq 'WORKSPACE_ORPHELIN') { $workspacePath } else { $null }
            Status             = $status
        }
        $auditResults += $report
        $newCache[$taskId] = @{ LastWriteTime = $lastWriteTime; Report = $report }
    }
}

$newCache | ConvertTo-Json -Depth 5 | Set-Content -Path $cacheFile -Encoding UTF8

# Ma logique de rapport
$summary = $auditResults | Group-Object -Property Status | Select-Object @{Name = "Statut"; Expression = { $_.Name } }, Count
if (-not $AsJson.IsPresent) {
    Write-Host "  - T√¢ches totales analys√©es : $totalTasks"
    # ... (plus de d√©tails sur la taille, etc.)
    Write-Host "R√©partition des statuts :"
    $summary | Format-Table -AutoSize
}

$finalReport = [PSCustomObject]@{
    DbMetrics    = $dbMetrics
    SizeMetrics  = $sizeMetrics
    TasksSummary = $summary
    TasksDetails = $auditResults
}

if ($AsJson.IsPresent) {
    $finalReport | ConvertTo-Json -Depth 5 -Compress
} else {
    $finalReport
}
