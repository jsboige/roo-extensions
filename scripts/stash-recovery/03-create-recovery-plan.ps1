#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Cr√©e le plan de r√©cup√©ration des stashs avec analyse des doublons
    
.DESCRIPTION
    Analyse chaque stash pour d√©terminer :
    - Si le code existe d√©j√† dans l'historique (doublon)
    - Si r√©cup√©rable sans conflit
    - Si n√©cessite r√©solution manuelle
    
.NOTES
    Date: 2025-10-16
    Mission: R√©cup√©ration de Stashs Git Perdus
    T√¢che: 03 - Cr√©er Plan de R√©cup√©ration
#>

param(
    [string]$OutputDir = "mcps/internal/servers/roo-state-manager",
    [string]$Timestamp = (Get-Date -Format "yyyyMMdd-HHmmss")
)

function Test-StashInHistory {
    param(
        [string]$RepoPath,
        [string]$StashRef
    )
    
    Push-Location $RepoPath
    
    try {
        # Obtenir le hash du stash
        $stashHash = git rev-parse $StashRef 2>&1
        
        # Chercher ce hash dans l'historique
        $inHistory = git log --all --oneline | Select-String -Pattern $stashHash -Quiet
        
        if ($inHistory) {
            return @{
                Status = "AlreadyCommitted"
                Message = "Ce stash a d√©j√† √©t√© commit√© dans l'historique"
            }
        }
        
        # V√©rifier si le contenu existe (m√™me si le hash diff√®re)
        $stashDiff = git stash show -p $StashRef 2>&1 | Out-String
        
        # Extraire les noms de fichiers modifi√©s
        $filesChanged = git stash show $StashRef --name-only 2>&1
        
        $allFilesUnchanged = $true
        foreach ($file in $filesChanged) {
            if ([string]::IsNullOrWhiteSpace($file)) { continue }
            
            # V√©rifier si le fichier existe et comparer
            if (Test-Path $file) {
                # Comparer le contenu du fichier dans le stash avec HEAD
                $currentContent = Get-Content $file -Raw -ErrorAction SilentlyContinue
                
                # Appliquer temporairement le stash sur un nouveau index
                $stashContent = git show "$StashRef`:$file" 2>&1 | Out-String
                
                if ($currentContent -ne $stashContent) {
                    $allFilesUnchanged = $false
                    break
                }
            } else {
                $allFilesUnchanged = $false
                break
            }
        }
        
        if ($allFilesUnchanged -and $filesChanged.Count -gt 0) {
            return @{
                Status = "ContentAlreadyPresent"
                Message = "Le contenu du stash existe d√©j√† dans la branche actuelle"
            }
        }
        
        return @{
            Status = "NotInHistory"
            Message = "Nouveau code non pr√©sent dans l'historique"
        }
        
    } finally {
        Pop-Location
    }
}

function Test-StashConflicts {
    param(
        [string]$RepoPath,
        [string]$StashRef
    )
    
    Push-Location $RepoPath
    
    try {
        # Tester l'application du stash avec --index pour d√©tecter les conflits
        $testOutput = git stash show $StashRef --name-only 2>&1
        
        $hasConflicts = $false
        $conflictFiles = @()
        
        foreach ($file in $testOutput) {
            if ([string]::IsNullOrWhiteSpace($file)) { continue }
            
            # V√©rifier si le fichier a √©t√© modifi√© depuis le stash
            if (Test-Path $file) {
                $gitStatus = git status --porcelain $file 2>&1
                if ($gitStatus) {
                    $hasConflicts = $true
                    $conflictFiles += $file
                }
            }
        }
        
        if ($hasConflicts) {
            return @{
                HasConflicts = $true
                ConflictFiles = $conflictFiles
                Message = "Conflits potentiels d√©tect√©s avec les fichiers modifi√©s"
            }
        }
        
        return @{
            HasConflicts = $false
            ConflictFiles = @()
            Message = "Aucun conflit d√©tect√©, application devrait √™tre propre"
        }
        
    } finally {
        Pop-Location
    }
}

function Get-StashRecommendation {
    param(
        [hashtable]$HistoryCheck,
        [hashtable]$ConflictCheck,
        [hashtable]$StashInfo
    )
    
    # Logique de d√©cision
    if ($HistoryCheck.Status -eq "AlreadyCommitted") {
        return @{
            Category = "üóëÔ∏è OBSOLETE"
            Action = "git stash drop"
            Priority = "Basse"
            Risk = "Aucun"
            Reason = "D√©j√† pr√©sent dans l'historique des commits"
        }
    }
    
    if ($HistoryCheck.Status -eq "ContentAlreadyPresent") {
        return @{
            Category = "‚ö†Ô∏è DOUBLON PARTIEL"
            Action = "V√©rification manuelle puis git stash drop"
            Priority = "Moyenne"
            Risk = "Faible"
            Reason = "Contenu similaire pr√©sent mais hash diff√©rent"
        }
    }
    
    if ($ConflictCheck.HasConflicts) {
        return @{
            Category = "üîß R√âSOLUTION MANUELLE"
            Action = "git stash apply + r√©solution des conflits"
            Priority = "Haute"
            Risk = "Moyen"
            Reason = "Conflits avec les fichiers actuels - n√©cessite review"
            ConflictFiles = $ConflictCheck.ConflictFiles
        }
    }
    
    # Stash r√©cent (< 7 jours) et sans conflit
    $stashDate = [DateTime]::Parse($StashInfo.Date)
    $daysSince = (Get-Date) - $stashDate
    
    if ($daysSince.TotalDays -lt 7) {
        return @{
            Category = "‚úÖ R√âCUP√âRABLE PRIORITAIRE"
            Action = "git stash pop"
            Priority = "Tr√®s Haute"
            Risk = "Faible"
            Reason = "Stash r√©cent, aucun conflit, nouveau code"
        }
    }
    
    if ($daysSince.TotalDays -lt 30) {
        return @{
            Category = "‚úÖ R√âCUP√âRABLE"
            Action = "git stash apply (puis drop apr√®s validation)"
            Priority = "Haute"
            Risk = "Faible"
            Reason = "Stash relativement r√©cent, nouveau code sans conflit"
        }
    }
    
    return @{
        Category = "‚ö†Ô∏è R√âCUP√âRABLE ANCIEN"
        Action = "git stash apply + review approfondie"
        Priority = "Moyenne"
        Risk = "Moyen"
        Reason = "Stash ancien (>30 jours) - v√©rifier pertinence actuelle"
    }
}

# Charger l'analyse d√©taill√©e
$analysisFile = Get-ChildItem "$PSScriptRoot/output/stash-detailed-analysis-*.md" | 
    Sort-Object LastWriteTime -Descending | 
    Select-Object -First 1

if (-not $analysisFile) {
    Write-Host "‚ùå Fichier d'analyse d√©taill√©e introuvable!" -ForegroundColor Red
    Write-Host "Ex√©cutez d'abord 02-detailed-stash-analysis.ps1" -ForegroundColor Yellow
    exit 1
}

Write-Host "üìÑ Chargement de l'analyse: $($analysisFile.Name)" -ForegroundColor Cyan

# Parser les stashs depuis le rapport (simplification - utilise git directement)
$repos = @(
    @{ Name = "mcps-internal"; Path = "mcps/internal" },
    @{ Name = "roo-extensions"; Path = "." }
)

$plan = @"
# üìã PLAN DE R√âCUP√âRATION DES STASHS GIT
**Date de cr√©ation**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**Mission**: R√©cup√©ration de Stashs Git Perdus

---

## üìä R√âSUM√â EX√âCUTIF

"@

$allStashes = @()
$categoryCounts = @{
    "‚úÖ R√âCUP√âRABLE PRIORITAIRE" = 0
    "‚úÖ R√âCUP√âRABLE" = 0
    "‚ö†Ô∏è R√âCUP√âRABLE ANCIEN" = 0
    "üîß R√âSOLUTION MANUELLE" = 0
    "‚ö†Ô∏è DOUBLON PARTIEL" = 0
    "üóëÔ∏è OBSOLETE" = 0
}

Write-Host "`n=== ANALYSE DES STASHS ===" -ForegroundColor Magenta

foreach ($repo in $repos) {
    Write-Host "`nüì¶ D√©p√¥t: $($repo.Name)" -ForegroundColor Cyan
    
    Push-Location $repo.Path
    
    try {
        $stashList = git stash list --date=iso 2>&1
        if ($LASTEXITCODE -ne 0 -or $stashList.Count -eq 0) {
            Write-Host "  Aucun stash trouv√©" -ForegroundColor Gray
            continue
        }
        
        for ($i = 0; $i -lt $stashList.Count; $i++) {
            $stashRef = "stash@{$i}"
            Write-Host "  Analyse $stashRef..." -ForegroundColor Gray
            
            $stashInfo = $stashList[$i]
            
            # Parser les infos
            $branch = if ($stashInfo -match 'On ([^:]+):') { $matches[1] } else { "unknown" }
            $date = if ($stashInfo -match '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}') { $matches[0] } else { "unknown" }
            $description = if ($stashInfo -match ': (.+)$') { $matches[1] } else { "No description" }
            
            # Obtenir stats
            $stats = git stash show $stashRef --stat 2>&1
            $filesChanged = ($stats | Where-Object { $_ -match '\|' } | Measure-Object).Count
            
            $stashData = @{
                Repo = $repo.Name
                RepoPath = $repo.Path
                Reference = $stashRef
                Index = $i
                Branch = $branch
                Date = $date
                Description = $description
                FilesChanged = $filesChanged
            }
            
            # Analyser historique
            Write-Host "    V√©rification historique..." -ForegroundColor DarkGray
            $historyCheck = Test-StashInHistory -RepoPath $repo.Path -StashRef $stashRef
            
            # Analyser conflits
            Write-Host "    V√©rification conflits..." -ForegroundColor DarkGray
            $conflictCheck = Test-StashConflicts -RepoPath $repo.Path -StashRef $stashRef
            
            # Obtenir recommandation
            $recommendation = Get-StashRecommendation -HistoryCheck $historyCheck -ConflictCheck $conflictCheck -StashInfo $stashData
            
            $stashData.HistoryCheck = $historyCheck
            $stashData.ConflictCheck = $conflictCheck
            $stashData.Recommendation = $recommendation
            
            $allStashes += $stashData
            $categoryCounts[$recommendation.Category]++
            
            Write-Host "    ‚Üí $($recommendation.Category)" -ForegroundColor Yellow
        }
        
    } finally {
        Pop-Location
    }
}

# Construire le r√©sum√©
$plan += @"

| Cat√©gorie | Nombre | Action Recommand√©e |
|-----------|--------|-------------------|
| ‚úÖ R√©cup√©rable Prioritaire | $($categoryCounts["‚úÖ R√âCUP√âRABLE PRIORITAIRE"]) | Appliquer imm√©diatement |
| ‚úÖ R√©cup√©rable | $($categoryCounts["‚úÖ R√âCUP√âRABLE"]) | Appliquer avec validation |
| ‚ö†Ô∏è R√©cup√©rable Ancien | $($categoryCounts["‚ö†Ô∏è R√âCUP√âRABLE ANCIEN"]) | Review puis appliquer |
| üîß R√©solution Manuelle | $($categoryCounts["üîß R√âSOLUTION MANUELLE"]) | R√©soudre conflits |
| ‚ö†Ô∏è Doublon Partiel | $($categoryCounts["‚ö†Ô∏è DOUBLON PARTIEL"]) | V√©rifier puis supprimer |
| üóëÔ∏è Obsol√®te | $($categoryCounts["üóëÔ∏è OBSOLETE"]) | Supprimer en s√©curit√© |
| **TOTAL** | **$($allStashes.Count)** | |

---

## üìù ANALYSE D√âTAILL√âE PAR STASH

"@

# Grouper par cat√©gorie
$groupedByCategory = $allStashes | Group-Object { $_.Recommendation.Category }

foreach ($group in ($groupedByCategory | Sort-Object {
    switch ($_.Name) {
        "‚úÖ R√âCUP√âRABLE PRIORITAIRE" { 1 }
        "‚úÖ R√âCUP√âRABLE" { 2 }
        "‚ö†Ô∏è R√âCUP√âRABLE ANCIEN" { 3 }
        "üîß R√âSOLUTION MANUELLE" { 4 }
        "‚ö†Ô∏è DOUBLON PARTIEL" { 5 }
        "üóëÔ∏è OBSOLETE" { 6 }
        default { 99 }
    }
})) {
    $plan += @"

### $($group.Name) ($($group.Count) stash(s))

"@
    
    foreach ($stash in $group.Group) {
        $plan += @"

#### üìå [$($stash.Repo)] $($stash.Reference)

**Description**: *$($stash.Description)*

| Propri√©t√© | Valeur |
|-----------|--------|
| Branche | ``$($stash.Branch)`` |
| Date | $($stash.Date) |
| Fichiers modifi√©s | $($stash.FilesChanged) |
| Priorit√© | **$($stash.Recommendation.Priority)** |
| Risque | $($stash.Recommendation.Risk) |

**Analyse**:
- **Historique**: $($stash.HistoryCheck.Message)
- **Conflits**: $($stash.ConflictCheck.Message)
- **Raison**: $($stash.Recommendation.Reason)

**Action recommand√©e**:
``````bash
cd $($stash.RepoPath)
$($stash.Recommendation.Action) $($stash.Reference)
``````

"@
        
        if ($stash.ConflictCheck.HasConflicts -and $stash.ConflictCheck.ConflictFiles.Count -gt 0) {
            $plan += @"

**Fichiers en conflit**:
"@
            foreach ($file in $stash.ConflictCheck.ConflictFiles) {
                $plan += "- ``$file```n"
            }
        }
        
        $plan += "`n---`n"
    }
}

# Ajouter plan d'action
$plan += @"

## üéØ PLAN D'ACTION RECOMMAND√â

### Phase 1 : R√©cup√©ration Prioritaire (Risque Faible)
**Stashs**: ‚úÖ R√âCUP√âRABLE PRIORITAIRE

``````bash
# Exemple pour mcps-internal stash@{0}
cd mcps/internal
git stash pop stash@{0}
# V√©rifier que tout compile
npm run build
# Commiter si OK
git add .
git commit -m "chore: recover stash - [description]"
``````

### Phase 2 : R√©cup√©ration Standard (Validation Requise)
**Stashs**: ‚úÖ R√âCUP√âRABLE

``````bash
# Appliquer sans supprimer le stash
cd <repo-path>
git stash apply stash@{N}
# Tester, valider
# Si OK:
git add .
git commit -m "chore: recover stash - [description]"
git stash drop stash@{N}
``````

### Phase 3 : R√©solution Manuelle (Conflits)
**Stashs**: üîß R√âSOLUTION MANUELLE

``````bash
cd <repo-path>
git stash apply stash@{N}
# R√©soudre les conflits
git status
git diff
# Apr√®s r√©solution
git add .
git commit -m "chore: recover stash with conflict resolution - [description]"
git stash drop stash@{N}
``````

### Phase 4 : Nettoyage (Doublons et Obsol√®tes)
**Stashs**: üóëÔ∏è OBSOLETE, ‚ö†Ô∏è DOUBLON PARTIEL

``````bash
# V√©rifier une derni√®re fois le contenu
cd <repo-path>
git stash show -p stash@{N}
# Si vraiment obsol√®te
git stash drop stash@{N}
``````

---

## ‚ö†Ô∏è PR√âCAUTIONS IMPORTANTES

1. **Backup avant op√©ration**: Faire un backup git avant toute op√©ration
   ``````bash
   git stash list > stash-backup-$Timestamp.txt
   ``````

2. **Tester apr√®s chaque r√©cup√©ration**:
   - V√©rifier que le code compile
   - Lancer les tests
   - V√©rifier que les fonctionnalit√©s marchent

3. **Commiter progressivement**:
   - Ne pas m√©langer plusieurs stashs dans un commit
   - Commiter apr√®s chaque stash r√©cup√©r√© avec succ√®s

4. **Documentation**:
   - Noter les d√©cisions prises
   - Documenter les r√©solutions de conflits

---

## üìà SUIVI DE PROGRESSION

- [ ] Phase 1 : R√©cup√©ration Prioritaire ($($categoryCounts["‚úÖ R√âCUP√âRABLE PRIORITAIRE"]) stash(s))
- [ ] Phase 2 : R√©cup√©ration Standard ($($categoryCounts["‚úÖ R√âCUP√âRABLE"]) + $($categoryCounts["‚ö†Ô∏è R√âCUP√âRABLE ANCIEN"]) stash(s))
- [ ] Phase 3 : R√©solution Manuelle ($($categoryCounts["üîß R√âSOLUTION MANUELLE"]) stash(s))
- [ ] Phase 4 : Nettoyage ($($categoryCounts["üóëÔ∏è OBSOLETE"]) + $($categoryCounts["‚ö†Ô∏è DOUBLON PARTIEL"]) stash(s))

---

*G√©n√©r√© automatiquement le $(Get-Date -Format "yyyy-MM-dd HH:mm:ss") par 03-create-recovery-plan.ps1*
"@

# Sauvegarder le plan
$planFile = "$OutputDir/STASH_RECOVERY_PLAN.md"
$plan | Out-File -FilePath $planFile -Encoding utf8

Write-Host "`n========================================" -ForegroundColor Magenta
Write-Host "‚úÖ Plan de r√©cup√©ration cr√©√©!" -ForegroundColor Green
Write-Host "üìÑ Fichier: $planFile" -ForegroundColor Cyan
Write-Host "`nüìä Statistiques:" -ForegroundColor Yellow
Write-Host "  ‚úÖ R√©cup√©rables imm√©diats: $($categoryCounts["‚úÖ R√âCUP√âRABLE PRIORITAIRE"])" -ForegroundColor Green
Write-Host "  ‚úÖ R√©cup√©rables standard: $($categoryCounts["‚úÖ R√âCUP√âRABLE"])" -ForegroundColor Green
Write-Host "  ‚ö†Ô∏è R√©cup√©rables anciens: $($categoryCounts["‚ö†Ô∏è R√âCUP√âRABLE ANCIEN"])" -ForegroundColor Yellow
Write-Host "  üîß N√©cessitent r√©solution: $($categoryCounts["üîß R√âSOLUTION MANUELLE"])" -ForegroundColor Yellow
Write-Host "  ‚ö†Ô∏è Doublons partiels: $($categoryCounts["‚ö†Ô∏è DOUBLON PARTIEL"])" -ForegroundColor DarkYellow
Write-Host "  üóëÔ∏è Obsol√®tes: $($categoryCounts["üóëÔ∏è OBSOLETE"])" -ForegroundColor Red

return $planFile