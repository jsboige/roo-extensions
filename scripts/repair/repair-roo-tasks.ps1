#Requires -Version 5.1

<#
.SYNOPSIS
    R√©pare les t√¢ches Roo dont les chemins de workspace sont devenus invalides suite √† un d√©placement.
.DESCRIPTION
    Ce script identifie d'abord les t√¢ches dont le workspace est introuvable (statut 'WORKSPACE_ORPHELIN').
    Pour chaque chemin racine unique et invalide, il demande √† l'utilisateur de fournir un nouveau chemin de base.
    
    Une fois les mappings de chemins fournis, le script met √† jour le fichier `task_metadata.json` de chaque
    t√¢che orpheline concern√©e avec le nouveau chemin de workspace corrig√©.

    Le script supporte pleinement le mode simulation (`-WhatIf`) pour pr√©visualiser les changements sans
    modifier aucun fichier.
.PARAMETER TasksPath
    Sp√©cifie le chemin vers le r√©pertoire 'tasks' de Roo. S'il n'est pas fourni, le script tente de le d√©tecter automatically.
.PARAMETER AuditReport
    Prend en entr√©e le r√©sultat d'un audit pr√©alable (g√©n√©r√© par `audit-roo-tasks.ps1`) pour √©viter de refaire l'analyse.
    Ce param√®tre attend une collection d'objets [PSCustomObject].
.EXAMPLE
    .\repair-roo-tasks.ps1
    Lance une analyse, puis guide l'utilisateur pour r√©parer les chemins de workspace des t√¢ches orphelines.
.EXAMPLE
    .\repair-roo-tasks.ps1 -WhatIf
    Simule le processus de r√©paration, affichant les changements qui seraient effectu√©s sans les appliquer.
.EXAMPLE
    $report = .\audit-roo-tasks.ps1 -Quiet
    .\repair-roo-tasks.ps1 -AuditReport $report.DetailedTaskReport
    Ex√©cute la r√©paration en se basant sur un audit pr√©alable, ce qui est plus rapide.
.OUTPUTS
    [PSCustomObject]
    Un objet pour chaque t√¢che qui a √©t√© r√©par√©e (ou qui le serait en mode -WhatIf).
#>
[CmdletBinding(SupportsShouldProcess = $true)]
param(
    [string]$TasksPath,
    [object[]]$AuditReport
)

# --- Fonctions de Support (Partag√©es avec le script d'audit) ---

function Get-RooTaskStoragePath {
    $defaultPath = Join-Path $env:APPDATA 'Code\User\globalStorage\rooveterinaryinc.roo-cline\tasks'
    if (Test-Path -Path $defaultPath -PathType Container) {
        return $defaultPath
    }
    return $null
}

function Test-RooTaskState {
    param(
        [Parameter(Mandatory = $true)]
        [System.IO.DirectoryInfo]$TaskDirectory
    )

    $metadataPath = Join-Path -Path $TaskDirectory.FullName -ChildPath 'task_metadata.json'
    $taskId = $TaskDirectory.Name

    if (-not (Test-Path -Path $metadataPath -PathType Leaf)) {
        return [PSCustomObject]@{ TaskId = $taskId; Status = "METADATA_MANQUANTE" }
    }
    
    # Pour ce script, on se concentre sur les m√©tadonn√©es manquantes.
    # On retourne un statut 'VALIDE' pour les autres cas pour ne pas interf√©rer.
    return [PSCustomObject]@{ TaskId = $taskId; Status = "VALIDE" }
}

# --- Point d'entr√©e du Script ---

$OutputEncoding = [System.Text.Encoding]::UTF8

if ([string]::IsNullOrWhiteSpace($TasksPath)) {
    $TasksPath = Get-RooTaskStoragePath
    if (-not $TasksPath) {
        Write-Error "Impossible de trouver le r√©pertoire des t√¢ches Roo. Veuillez sp√©cifier le chemin avec le param√®tre -TasksPath."
        exit 1
    }
}

# 1. Obtenir la liste des t√¢ches et leur statut
if ($null -eq $AuditReport) {
    Write-Host "üîç Aucun rapport d'audit fourni. Lancement de l'analyse des t√¢ches..."
    $taskDirs = Get-ChildItem -Path $TasksPath -Directory
    $totalTasks = $taskDirs.Count
    $AuditReport = @()
    $taskDirs | ForEach-Object -Process {
        Write-Progress -Activity "Analyse des t√¢ches" -Status "Analyse de $($_.Name)" -PercentComplete (([int]$foreach.CurrentIndex + 1 / $totalTasks) * 100)
        $AuditReport += Test-RooTaskState -TaskDirectory $_
    }
    Write-Host "‚úÖ Analyse termin√©e."
}

$orphanTasks = $AuditReport | Where-Object { $_.Status -eq 'WORKSPACE_ORPHELIN' }

if ($orphanTasks.Count -eq 0) {
    Write-Host -ForegroundColor Green "üéâ Aucune t√¢che avec un workspace orphelin n'a √©t√© trouv√©e."
    # Ne pas quitter, on v√©rifie maintenant les m√©tadonn√©es manquantes
}

Write-Host -ForegroundColor Yellow "‚ö†Ô∏è $($orphanTasks.Count) t√¢che(s) avec un workspace orphelin ont √©t√© trouv√©es."
Write-Host ("-" * 80)

# 2. Identifier les chemins de base invalides et demander des remplacements
$rootPathMappings = @{}
$uniqueInvalidRootPaths = $orphanTasks | ForEach-Object {
    $path = $_.WorkspacePath
    while ($path -and -not (Test-Path $path)) {
        $parent = Split-Path -Path $path -Parent
        if ($parent -eq $path) { break } # Atteint la racine (par ex. C:\)
        $path = $parent
    }
    if ($path) { return Split-Path -Path $path -Parent } # Retourne le premier parent qui n'existe PAS
} | Where-Object { $_ } | Sort-Object -Unique

Write-Host " interactive pour mapper les anciens chemins de base aux nouveaux."
Write-Host "Laissez la r√©ponse vide pour ignorer la r√©paration d'un chemin."

foreach ($invalidRoot in $uniqueInvalidRootPaths) {
    if (-not $invalidRoot) { continue }
    $newRoot = Read-Host "  -> Le chemin de base '$invalidRoot' est introuvable. Entrez le nouveau chemin √©quivalent"
    if (-not [string]::IsNullOrWhiteSpace($newRoot)) {
        if (-not (Test-Path -Path $newRoot -PathType Container)) {
            Write-Warning "Le chemin '$newRoot' n'existe pas. Il sera utilis√© quand m√™me, mais pourrait cr√©er des chemins invalides."
        }
        $rootPathMappings[$invalidRoot] = $newRoot
    }
}

if ($rootPathMappings.Count -eq 0) {
    Write-Host "Aucun mapping de chemin fourni. Aucune r√©paration ne sera effectu√©e."
    exit 0
}

Write-Host ("-" * 80)
Write-Host "üîß Application des r√©parations pour les workspaces orphelins..."

# 3. Appliquer les r√©parations
$repairedTasksCount = 0
foreach ($task in $orphanTasks) {
    $metadataPath = Join-Path -Path $TasksPath -ChildPath $task.TaskId -ChildPath 'task_metadata.json'
    
    # Trouver le mapping applicable
    $applicableMapping = $null
    foreach ($oldRoot in $rootPathMappings.Keys) {
        if ($task.WorkspacePath.StartsWith($oldRoot, [System.StringComparison]::InvariantCultureIgnoreCase)) {
            $applicableMapping = @{ Old = $oldRoot; New = $rootPathMappings[$oldRoot] }
            break
        }
    }

    if ($null -eq $applicableMapping) {
        continue # Pas de mapping pour cette t√¢che
    }

    # Construire le nouveau chemin
    $relativePath = $task.WorkspacePath.Substring($applicableMapping.Old.Length)
    $newWorkspacePath = Join-Path -Path $applicableMapping.New -ChildPath $relativePath

    $target = "task_metadata.json pour la t√¢che $($task.TaskId)"
    $action = "Mettre √† jour le workspace de '$($task.WorkspacePath)' vers '$newWorkspacePath'"

    if ($PSCmdlet.ShouldProcess($target, $action)) {
        try {
            # Lire, modifier, √©crire
            $metadataFile = Get-Content -Path $metadataPath -Raw | ConvertFrom-Json
            
            # Mettre √† jour la bonne propri√©t√©
            if ($metadataFile.PSObject.Properties.Name -contains 'workspace_path') {
                $metadataFile.workspace_path = $newWorkspacePath
            } elseif ($metadataFile.PSObject.Properties.Name -contains 'workspace') { # Fallback
                $metadataFile.workspace = $newWorkspacePath
            } else {
                 Write-Warning "La tache $($task.TaskId) n'a pas de propriete 'workspace_path' ou 'workspace' dans ses metadonnees."
                 continue
            }
            
            $metadataFile | ConvertTo-Json -Depth 5 | Set-Content -Path $metadataPath -Encoding UTF8 -Force
            Write-Host -ForegroundColor Green "‚úÖ T√¢che $($task.TaskId) r√©par√©e."
            $repairedTasksCount++
        }
        catch {
             Write-Error "Impossible de r√©parer la t√¢che $($task.TaskId). Erreur : $($_.Exception.Message)"
        }
    }
}

Write-Host ("-" * 80)
Write-Host "üéâ R√©paration termin√©e."
Write-Host "  - T√¢ches r√©par√©es : $repairedTasksCount"
Write-Host ("-" * 80)

# --- R√©paration des M√©tadonn√©es Manquantes ---

$missingMetadataTasks = $AuditReport | Where-Object { $_.Status -eq 'METADATA_MANQUANTE' }

if ($missingMetadataTasks.Count -gt 0) {
    Write-Host -ForegroundColor Yellow "‚ö†Ô∏è $($missingMetadataTasks.Count) t√¢che(s) avec des m√©tadonn√©es manquantes ont √©t√© trouv√©es."
    Write-Host ("-" * 80)
    Write-Host "üîß Tentative de cr√©ation des fichiers task_metadata.json manquants..."
    $repairedMetadataCount = 0

    foreach ($task in $missingMetadataTasks) {
        $metadataPath = Join-Path -Path $TasksPath -ChildPath $task.TaskId -ChildPath 'task_metadata.json'
        
        $target = "Fichier de m√©tadonn√©es pour la t√¢che $($task.TaskId)"
        $action = "Cr√©er un fichier task_metadata.json vide"

        if ($PSCmdlet.ShouldProcess($target, $action)) {
            try {
                # Cr√©er un fichier JSON vide
                '{}' | Set-Content -Path $metadataPath -Encoding UTF8 -Force
                Write-Host -ForegroundColor Green "‚úÖ Fichier de m√©tadonn√©es cr√©√© pour la t√¢che $($task.TaskId)."
                $repairedMetadataCount++
            }
            catch {
                Write-Error "Impossible de cr√©er le fichier de m√©tadonn√©es pour la t√¢che $($task.TaskId). Erreur : $($_.Exception.Message)"
            }
        }
    }
    Write-Host "  - Fichiers de m√©tadonn√©es recr√©√©s : $repairedMetadataCount"
    Write-Host ("-" * 80)
} else {
    Write-Host -ForegroundColor Green "üéâ Aucune t√¢che avec des m√©tadonn√©es manquantes n'a √©t√© trouv√©e."
}