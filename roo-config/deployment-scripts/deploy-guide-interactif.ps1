# Guide interactif pour le d√©ploiement des modes simple et complex sur Windows
# Ce script guide l'utilisateur √† travers les √©tapes de d√©ploiement des modes
# en appliquant les recommandations du rapport final

# Fonction pour afficher des messages color√©s
function Write-ColorOutput {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message,
        
        [Parameter(Mandatory = $false)]
        [string]$ForegroundColor = "White"
    )
    
    $originalColor = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    Write-Output $Message
    $host.UI.RawUI.ForegroundColor = $originalColor
}

# Banni√®re
Clear-Host
Write-ColorOutput "==========================================================" "Cyan"
Write-ColorOutput "   Guide interactif pour le d√©ploiement des modes Roo" "Cyan"
Write-ColorOutput "   (Simple et Complex sur Windows)" "Cyan"
Write-ColorOutput "==========================================================" "Cyan"
Write-ColorOutput "`nCe guide vous accompagnera pas √† pas dans le d√©ploiement des modes simple et complex pour Roo.`n" "White"

# V√©rifier que tous les scripts n√©cessaires existent
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$requiredScripts = @(
    "check-deployed-encoding.ps1",
    "fix-encoding-complete.ps1",
    "fix-encoding-final.ps1",
    "deploy-modes-simple-complex.ps1",
    "verify-deployed-modes.ps1",
    "force-deploy-with-encoding-fix.ps1"
)

$missingScripts = @()
foreach ($script in $requiredScripts) {
    $scriptPath = Join-Path -Path $scriptDir -ChildPath $script
    if (-not (Test-Path -Path $scriptPath)) {
        $missingScripts += $script
    }
}

if ($missingScripts.Count -gt 0) {
    Write-ColorOutput "Erreur: Les scripts suivants sont manquants:" "Red"
    foreach ($script in $missingScripts) {
        Write-ColorOutput "- $script" "Red"
    }
    Write-ColorOutput "Veuillez vous assurer que tous les scripts n√©cessaires sont pr√©sents dans le r√©pertoire $scriptDir" "Red"
    exit 1
}

# √âtape 1: V√©rification de l'environnement
Write-ColorOutput "`n[√âtape 1/5] V√©rification de l'environnement" "Yellow"
Write-ColorOutput "-------------------------------------------" "Yellow"

# V√©rifier si le fichier source existe
$sourceFilePath = Join-Path -Path $scriptDir -ChildPath "..\roo-modes\configs\standard-modes.json"
if (-not (Test-Path -Path $sourceFilePath)) {
    Write-ColorOutput "Erreur: Le fichier source 'standard-modes.json' n'existe pas." "Red"
    Write-ColorOutput "Chemin attendu: $sourceFilePath" "Red"
    
    $createEmptyFile = Read-Host "Voulez-vous cr√©er un fichier vide √† cet emplacement? (O/N)"
    if ($createEmptyFile -eq "O" -or $createEmptyFile -eq "o") {
        try {
            New-Item -Path $sourceFilePath -ItemType File -Force | Out-Null
            Write-ColorOutput "Fichier vide cr√©√©. Vous devrez y ajouter le contenu appropri√© avant de continuer." "Yellow"
            exit 0
        } catch {
            Write-ColorOutput "Erreur lors de la cr√©ation du fichier: $_" "Red"
            exit 1
        }
    } else {
        Write-ColorOutput "Veuillez cr√©er le fichier source avant de continuer." "Red"
        exit 1
    }
}

Write-ColorOutput "‚úì Le fichier source existe." "Green"

# V√©rifier le r√©pertoire de destination
$destinationDir = Join-Path -Path $env:APPDATA -ChildPath "Code\User\globalStorage\rooveterinaryinc.roo-cline\settings"
if (-not (Test-Path -Path $destinationDir)) {
    Write-ColorOutput "Le r√©pertoire de destination n'existe pas: $destinationDir" "Yellow"
    Write-ColorOutput "Il sera cr√©√© automatiquement lors du d√©ploiement." "Yellow"
} else {
    Write-ColorOutput "‚úì Le r√©pertoire de destination existe." "Green"
    
    # V√©rifier si le fichier de destination existe d√©j√†
    $destinationFile = Join-Path -Path $destinationDir -ChildPath "custom_modes.json"
    if (Test-Path -Path $destinationFile) {
        Write-ColorOutput "‚úì Le fichier de destination existe d√©j√†." "Green"
        Write-ColorOutput "  Il sera remplac√© lors du d√©ploiement." "Yellow"
    }
}

# √âtape 2: V√©rification de l'encodage
Write-ColorOutput "`n[√âtape 2/5] V√©rification de l'encodage du fichier source" "Yellow"
Write-ColorOutput "---------------------------------------------------" "Yellow"

Write-ColorOutput "Ex√©cution du script de v√©rification d'encodage..." "White"
$checkEncodingScript = Join-Path -Path $scriptDir -ChildPath "check-deployed-encoding.ps1"
& $checkEncodingScript

$fixEncoding = Read-Host "`nSouhaitez-vous corriger l'encodage du fichier source? (O/N)"
if ($fixEncoding -eq "O" -or $fixEncoding -eq "o") {
    Write-ColorOutput "`nS√©lectionnez la m√©thode de correction:" "White"
    Write-ColorOutput "1. Correction compl√®te (recommand√©)" "White"
    Write-ColorOutput "2. Correction avanc√©e avec expressions r√©guli√®res" "White"
    $correctionMethod = Read-Host "Votre choix (1 ou 2)"
    
    if ($correctionMethod -eq "1") {
        $fixEncodingScript = Join-Path -Path $scriptDir -ChildPath "fix-encoding-complete.ps1"
        Write-ColorOutput "Ex√©cution du script de correction compl√®te..." "White"
        & $fixEncodingScript
    } elseif ($correctionMethod -eq "2") {
        $fixEncodingScript = Join-Path -Path $scriptDir -ChildPath "fix-encoding-final.ps1"
        Write-ColorOutput "Ex√©cution du script de correction avanc√©e..." "White"
        & $fixEncodingScript
    } else {
        Write-ColorOutput "Choix invalide. Aucune correction appliqu√©e." "Red"
    }
}

# √âtape 3: D√©ploiement
Write-ColorOutput "`n[√âtape 3/5] D√©ploiement des modes" "Yellow"
Write-ColorOutput "----------------------------" "Yellow"

Write-ColorOutput "S√©lectionnez le type de d√©ploiement:" "White"
Write-ColorOutput "1. D√©ploiement simple avec force (recommand√©)" "White"
Write-ColorOutput "2. D√©ploiement avec options avanc√©es" "White"
$deploymentMethod = Read-Host "Votre choix (1 ou 2)"

if ($deploymentMethod -eq "1") {
    $deployScript = Join-Path -Path $scriptDir -ChildPath "simple-deploy.ps1"
    Write-ColorOutput "Ex√©cution du script de d√©ploiement simple..." "White"
    & $deployScript
} elseif ($deploymentMethod -eq "2") {
    Write-ColorOutput "`nS√©lectionnez le type de d√©ploiement:" "White"
    Write-ColorOutput "1. D√©ploiement global (pour tous les projets)" "White"
    Write-ColorOutput "2. D√©ploiement local (pour ce projet uniquement)" "White"
    $deploymentType = Read-Host "Votre choix (1 ou 2)"
    
    $deploymentTypeParam = if ($deploymentType -eq "1") { "global" } else { "local" }
    
    $forceDeployment = Read-Host "Forcer le d√©ploiement? (O/N)"
    $forceParam = if ($forceDeployment -eq "O" -or $forceDeployment -eq "o") { "-Force" } else { "" }
    
    $testAfterDeploy = Read-Host "Ex√©cuter les tests apr√®s le d√©ploiement? (O/N)"
    $testParam = if ($testAfterDeploy -eq "O" -or $testAfterDeploy -eq "o") { "-TestAfterDeploy" } else { "" }
    
    $deployScript = Join-Path -Path $scriptDir -ChildPath "deploy-modes-simple-complex.ps1"
    $deployCommand = "$deployScript -DeploymentType $deploymentTypeParam $forceParam $testParam"
    
    Write-ColorOutput "Ex√©cution de la commande: $deployCommand" "White"
    Invoke-Expression $deployCommand
} else {
    Write-ColorOutput "Choix invalide. Aucun d√©ploiement effectu√©." "Red"
    exit 1
}

# √âtape 4: V√©rification du d√©ploiement
Write-ColorOutput "`n[√âtape 4/5] V√©rification du d√©ploiement" "Yellow"
Write-ColorOutput "-----------------------------------" "Yellow"

$verifyScript = Join-Path -Path $scriptDir -ChildPath "verify-deployed-modes.ps1"
Write-ColorOutput "Ex√©cution du script de v√©rification..." "White"
& $verifyScript

$deploymentSuccessful = Read-Host "`nLe d√©ploiement a-t-il r√©ussi? (O/N)"
if ($deploymentSuccessful -ne "O" -and $deploymentSuccessful -ne "o") {
    Write-ColorOutput "`nR√©solution des probl√®mes:" "Yellow"
    Write-ColorOutput "1. Forcer le d√©ploiement avec correction d'encodage" "White"
    Write-ColorOutput "2. Quitter et r√©soudre manuellement" "White"
    $troubleshootOption = Read-Host "Votre choix (1 ou 2)"
    
    if ($troubleshootOption -eq "1") {
        $forceDeployScript = Join-Path -Path $scriptDir -ChildPath "force-deploy-with-encoding-fix.ps1"
        Write-ColorOutput "Ex√©cution du script de d√©ploiement forc√© avec correction d'encodage..." "White"
        & $forceDeployScript
    } else {
        Write-ColorOutput "Veuillez consulter le rapport de d√©ploiement pour plus d'informations sur la r√©solution des probl√®mes." "Yellow"
        $openReport = Read-Host "Voulez-vous ouvrir le rapport de d√©ploiement? (O/N)"
        if ($openReport -eq "O" -or $openReport -eq "o") {
            $reportPath = Join-Path -Path $scriptDir -ChildPath "..\docs\rapports\rapport-final-deploiement-modes-windows.md"
            if (Test-Path $reportPath) {
                Start-Process $reportPath
            } else {
                Write-ColorOutput "Rapport non trouv√©: $reportPath" "Red"
            }
        }
        exit 1
    }
}

# √âtape 5: Instructions finales
Write-ColorOutput "`n[√âtape 5/5] Instructions finales" "Yellow"
Write-ColorOutput "----------------------------" "Yellow"

Write-ColorOutput "Pour activer les modes d√©ploy√©s:" "White"
Write-ColorOutput "1. Red√©marrez Visual Studio Code" "White"
Write-ColorOutput "2. Ouvrez la palette de commandes (Ctrl+Shift+P)" "White"
Write-ColorOutput "3. Tapez 'Roo: Switch Mode' et s√©lectionnez un des modes suivants:" "White"
Write-ColorOutput "   - üíª Code Simple" "White"
Write-ColorOutput "   - üíª Code Complex" "White"
Write-ColorOutput "   - ü™≤ Debug Simple" "White"
Write-ColorOutput "   - ü™≤ Debug Complex" "White"
Write-ColorOutput "   - üèóÔ∏è Architect Simple" "White"
Write-ColorOutput "   - üèóÔ∏è Architect Complex" "White"
Write-ColorOutput "   - ‚ùì Ask Simple" "White"
Write-ColorOutput "   - ‚ùì Ask Complex" "White"
Write-ColorOutput "   - ü™É Orchestrator Simple" "White"
Write-ColorOutput "   - ü™É Orchestrator Complex" "White"
Write-ColorOutput "   - üë®‚Äçüíº Manager" "White"

# Conclusion
Write-ColorOutput "`n==========================================================" "Cyan"
Write-ColorOutput "   D√©ploiement termin√©!" "Green"
Write-ColorOutput "==========================================================" "Cyan"
Write-ColorOutput "`nPour plus d'informations, consultez le rapport complet:" "White"
Write-ColorOutput "..\docs\rapports\rapport-final-deploiement-modes-windows.md" "White"
Write-ColorOutput "`nEn cas de probl√®me persistant, consultez la section 'R√©solution des probl√®mes persistants' du rapport." "White"