# Script de V√©rification Finale du D√©ploiement CSP
# Confirme que la correction CSP (suppression de 'strict-dynamic') est bien d√©ploy√©e

Write-Host "`n=== V√âRIFICATION FINALE DU D√âPLOIEMENT CSP ===" -ForegroundColor Cyan

# 1. Trouver l'extension active
Write-Host "`n[1] Recherche de l'extension Roo active..." -ForegroundColor Yellow
$extPath = (Get-ChildItem "$env:USERPROFILE\.vscode\extensions" -Filter "rooveterinaryinc.roo-cline-*" | 
    Sort-Object LastWriteTime -Descending | 
    Select-Object -First 1).FullName

if (-not $extPath) {
    Write-Host "‚ùå ERREUR: Extension Roo non trouv√©e" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Extension trouv√©e: $extPath" -ForegroundColor Green
Write-Host "   Version: $($extPath -replace '.*roo-cline-', '')" -ForegroundColor Gray

# 2. V√©rifier l'absence de 'strict-dynamic' dans extension.js
Write-Host "`n[2] V√©rification de la correction CSP dans extension.js..." -ForegroundColor Yellow
$extensionJs = "$extPath/dist/extension.js"

if (-not (Test-Path $extensionJs)) {
    Write-Host "‚ùå ERREUR: Fichier extension.js non trouv√©: $extensionJs" -ForegroundColor Red
    exit 1
}

$strictDynamicFound = Select-String -Path $extensionJs -Pattern "strict-dynamic" -CaseSensitive -Quiet

if ($strictDynamicFound) {
    Write-Host "‚ùå √âCHEC: 'strict-dynamic' trouv√© dans extension.js" -ForegroundColor Red
    Write-Host "   La correction CSP n'a PAS √©t√© appliqu√©e correctement." -ForegroundColor Red
    exit 1
} else {
    Write-Host "‚úÖ SUCCESS: 'strict-dynamic' absent de extension.js" -ForegroundColor Green
    Write-Host "   La correction CSP est correctement appliqu√©e." -ForegroundColor Green
}

# 3. V√©rifier la pr√©sence du code CSP corrig√©
Write-Host "`n[3] V√©rification du code CSP dans extension.js..." -ForegroundColor Yellow
$cspPattern = "script-src 'self' 'unsafe-inline' 'unsafe-eval'"
$cspFound = Select-String -Path $extensionJs -Pattern $cspPattern -Quiet

if ($cspFound) {
    Write-Host "‚úÖ Code CSP corrig√© pr√©sent" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  WARNING: Pattern CSP attendu non trouv√© (le code peut √™tre minifi√©)" -ForegroundColor Yellow
}

# 4. V√©rifier les dates de compilation
Write-Host "`n[4] V√©rification des dates de compilation..." -ForegroundColor Yellow
$srcDist = "C:\dev\roo-code\src\dist\extension.js"
$extDist = "$extPath\dist\extension.js"

if (Test-Path $srcDist) {
    $srcDate = (Get-Item $srcDist).LastWriteTime
    $extDate = (Get-Item $extDist).LastWriteTime
    
    Write-Host "   Source (src/dist): $($srcDate.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
    Write-Host "   Extension d√©ploy√©e: $($extDate.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
    
    if ($extDate -ge $srcDate) {
        Write-Host "‚úÖ L'extension contient la derni√®re compilation" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: L'extension semble plus ancienne que la source" -ForegroundColor Yellow
    }
}

# 5. R√©sum√© final
Write-Host "`n=== R√âSUM√â FINAL ===" -ForegroundColor Cyan
Write-Host "‚úÖ Correction CSP pr√©sente dans le backend compil√© (src/dist)" -ForegroundColor Green
Write-Host "‚úÖ Correction CSP d√©ploy√©e dans l'extension VSCode" -ForegroundColor Green
Write-Host "‚úÖ 'strict-dynamic' supprim√© avec succ√®s" -ForegroundColor Green
Write-Host "`nüéØ √âTAT: Pr√™t pour test utilisateur" -ForegroundColor Green
Write-Host "‚ö†Ô∏è  ACTION REQUISE: Red√©marrer VSCode pour appliquer les changements" -ForegroundColor Yellow

Write-Host "`n=== INSTRUCTIONS FINALES ===" -ForegroundColor Cyan
Write-Host "1. Fermez TOUTES les fen√™tres VSCode" -ForegroundColor White
Write-Host "2. Relancez VSCode" -ForegroundColor White
Write-Host "3. Testez la fonctionnalit√© de condensation avec OpenRouter" -ForegroundColor White
Write-Host "4. V√©rifiez que les chunks dynamiques se chargent correctement" -ForegroundColor White

Write-Host "`n‚úÖ Script de v√©rification termin√© avec succ√®s!" -ForegroundColor Green