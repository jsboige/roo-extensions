# Script de Synchronisation, Rebuild et Red√©ploiement Complet
# Usage: .\021-sync-rebuild-redeploy.ps1

param(
    [switch]$SkipStash,
    [switch]$SkipBuild,
    [switch]$SkipDeploy
)

$ErrorActionPreference = "Stop"
$repoPath = "C:\dev\roo-code"
$deployScript = "C:\dev\roo-extensions\roo-code-customization\deploy-standalone.ps1"
$extensionPath = "C:\Users\jsboi\.vscode\extensions\rooveterinaryinc.roo-cline-3.28.16"

Write-Host "`n=== SYNC UPSTREAM ET RED√âPLOIEMENT ===" -ForegroundColor Cyan
Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n" -ForegroundColor Gray

# √âtape 1: Sauvegarder l'√©tat actuel
if (-not $SkipStash) {
    Write-Host "[1/6] Sauvegarde de l'√©tat actuel..." -ForegroundColor Yellow
    Push-Location $repoPath
    
    $status = git status --porcelain
    if ($status) {
        Write-Host "  Changements d√©tect√©s, cr√©ation du stash..." -ForegroundColor Gray
        git stash push -m "WIP: avant sync upstream $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        if ($LASTEXITCODE -ne 0) { throw "√âchec du stash" }
        Write-Host "  ‚úÖ Stash cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "  ‚úÖ Aucun changement √† sauvegarder" -ForegroundColor Green
    }
    
    Pop-Location
} else {
    Write-Host "[1/6] Stash ignor√© (--SkipStash)" -ForegroundColor Gray
}

# √âtape 2: Fetch upstream
Write-Host "`n[2/6] R√©cup√©ration des commits upstream..." -ForegroundColor Yellow
Push-Location $repoPath

git fetch upstream
if ($LASTEXITCODE -ne 0) { throw "√âchec du fetch upstream" }

$behindCount = (git rev-list --count HEAD..upstream/main)
Write-Host "  üìä $behindCount commits en retard" -ForegroundColor Gray

Pop-Location
Write-Host "  ‚úÖ Fetch termin√©" -ForegroundColor Green

# √âtape 3: Merge upstream/main
Write-Host "`n[3/6] Merge de upstream/main..." -ForegroundColor Yellow
Push-Location $repoPath

git merge upstream/main --no-edit
if ($LASTEXITCODE -ne 0) { 
    Write-Host "  ‚ö†Ô∏è  Conflits d√©tect√©s!" -ForegroundColor Red
    Write-Host "  R√©solvez les conflits puis relancez avec --SkipStash" -ForegroundColor Yellow
    Pop-Location
    exit 1
}

$mergeResult = git log -1 --oneline
Write-Host "  üìù $mergeResult" -ForegroundColor Gray
Write-Host "  ‚úÖ Merge r√©ussi sans conflits" -ForegroundColor Green

Pop-Location

# √âtape 4: Rebuild complet
if (-not $SkipBuild) {
    Write-Host "`n[4/6] Rebuild complet..." -ForegroundColor Yellow
    Push-Location $repoPath
    
    # Install dependencies
    Write-Host "  üì¶ Installation des d√©pendances..." -ForegroundColor Gray
    pnpm install
    if ($LASTEXITCODE -ne 0) { throw "√âchec de pnpm install" }
    
    # Build backend
    Write-Host "  üî® Build backend..." -ForegroundColor Gray
    Push-Location "$repoPath\src"
    npm run bundle
    if ($LASTEXITCODE -ne 0) { throw "√âchec du build backend" }
    Pop-Location
    
    # Build webview-ui
    Write-Host "  üé® Build webview-ui..." -ForegroundColor Gray
    Push-Location "$repoPath\webview-ui"
    pnpm run build
    if ($LASTEXITCODE -ne 0) { throw "√âchec du build webview-ui" }
    Pop-Location
    
    Pop-Location
    Write-Host "  ‚úÖ Rebuild termin√©" -ForegroundColor Green
} else {
    Write-Host "`n[4/6] Build ignor√© (--SkipBuild)" -ForegroundColor Gray
}

# √âtape 5: Red√©ploiement
if (-not $SkipDeploy) {
    Write-Host "`n[5/6] Red√©ploiement..." -ForegroundColor Yellow
    
    powershell.exe -ExecutionPolicy Bypass -File $deployScript
    if ($LASTEXITCODE -ne 0) { throw "√âchec du d√©ploiement" }
    
    Write-Host "  ‚úÖ D√©ploiement termin√©" -ForegroundColor Green
} else {
    Write-Host "`n[5/6] D√©ploiement ignor√© (--SkipDeploy)" -ForegroundColor Gray
}

# √âtape 6: V√©rification
Write-Host "`n[6/6] V√©rification..." -ForegroundColor Yellow

$indexHtml = "$extensionPath\dist\webview-ui\build\index.html"
$indexJs = "$extensionPath\dist\webview-ui\build\assets\index.js"

if (Test-Path $indexHtml) {
    Write-Host "  ‚úÖ index.html pr√©sent" -ForegroundColor Green
} else {
    Write-Host "  ‚ùå index.html manquant" -ForegroundColor Red
}

if (Test-Path $indexJs) {
    $lastWrite = (Get-Item $indexJs).LastWriteTime
    $age = (Get-Date) - $lastWrite
    
    if ($age.TotalMinutes -lt 5) {
        Write-Host "  ‚úÖ index.js mis √† jour ($('{0:N0}' -f $age.TotalSeconds)s)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö†Ô∏è  index.js ancien ($($lastWrite.ToString('yyyy-MM-dd HH:mm:ss')))" -ForegroundColor Yellow
    }
} else {
    Write-Host "  ‚ùå index.js manquant" -ForegroundColor Red
}

$distFiles = (Get-ChildItem "$extensionPath\dist" -Recurse -File).Count
Write-Host "  üìä $distFiles fichiers dans dist/" -ForegroundColor Gray

# R√©sum√©
Write-Host "`n=== SUCC√àS ===" -ForegroundColor Green
Write-Host "‚úÖ Synchronisation avec upstream/main r√©ussie"
Write-Host "‚úÖ Rebuild complet termin√©" 
Write-Host "‚úÖ Red√©ploiement effectu√©"
Write-Host "`n‚ö†Ô∏è  RED√âMARREZ VSCODE pour appliquer les changements" -ForegroundColor Yellow