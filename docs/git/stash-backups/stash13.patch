diff --git a/sync_roo_environment.ps1 b/sync_roo_environment.ps1
index eb95f5b..0180c45 100644
--- a/sync_roo_environment.ps1
+++ b/sync_roo_environment.ps1
@@ -3,11 +3,10 @@
 $RepoPath = "d:/roo-extensions"
 $LogFile = "d:/roo-extensions/sync_log.txt"
 $ConflictLogDir = "d:/roo-extensions/sync_conflicts"
-$ErrorActionPreference = "Stop" # Stop on errors for better control
 
 # Créer le répertoire de logs de conflits si inexistant
 If (-not (Test-Path $ConflictLogDir)) {
-    New-Item -ItemType Directory -Path $ConflictLogDir -ErrorAction SilentlyContinue | Out-Null
+    New-Item -ItemType Directory -Path $ConflictLogDir | Out-Null
 }
 
 function Log-Message {
@@ -15,51 +14,44 @@ function Log-Message {
         [string]$Message,
         [string]$Type = "INFO" # INFO, ALERTE, ERREUR
     )
-    $LogEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $($Type): $($Message)"
-    Add-Content -Path $LogFile -Value $LogEntry
-    Write-Host $LogEntry # Also output to console for scheduler visibility
+    Add-Content -Path $LogFile -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $($Type): $($Message)"
 }
 
 Set-Location $RepoPath
 
-# --- Étape 1: Préparation et Vérification de l'Environnement Git ---
-Log-Message "Étape 1: Préparation et Vérification de l'Environnement Git..."
-$StashApplied = $false
-Try {
-    Log-Message "Vérification du statut Git avant pull..."
-    $GitStatus = git status --porcelain
-    if ($GitStatus) {
-        Log-Message "Modifications locales détectées. Tentative de stash..." "ALERTE"
-        git stash push -m "Automated stash before sync pull"
+# Étape 1: Préparation et Vérification de l'Environnement Git
+Log-Message "Vérification du statut Git avant pull..."
+$GitStatus = & git status --porcelain
+if ($GitStatus) {
+    Log-Message "Modifications locales détectées. Tentative de stash..." "ALERTE"
+    Try {
+& git stash push -m "Automated stash before sync pull" | Out-Null -ErrorAction Stop
         Log-Message "Stash réussi."
         $StashApplied = $true
-    } else {
-        Log-Message "Aucune modification locale détectée avant le pull."
+    } Catch {
+        Log-Message "Échec du stash. Annulation de la synchronisation. Message : $($_.Exception.Message)" "ERREUR"
+        Exit 1 # Sortie avec erreur
     }
-} Catch {
-    Log-Message "Échec lors de la vérification du statut Git ou du stash. Message : $($_.Exception.Message)" "ERREUR"
-    Exit 1 # Sortie avec erreur
+} else {
+    $StashApplied = $false
 }
 
-# --- Étape 2: Mise à Jour du Dépôt Local (git pull) ---
-Log-Message "Étape 2: Mise à Jour du Dépôt Local (git pull)..."
+# Étape 2: Mise à Jour du Dépôt Local (git pull)
+Log-Message "Exécution de git pull..."
 Try {
-    Log-Message "Exécution de git pull origin main..."
-    # Capture HEAD avant le pull pour la comparaison ultérieure
-    $HeadBeforePull = git rev-parse HEAD
-    git pull origin main
+    & git pull origin main | Out-Null -ErrorAction Stop
     Log-Message "Git pull réussi."
 } Catch {
     $ErrorMessage = $_.Exception.Message
     if ($ErrorMessage -like "*merge conflict*") {
         Log-Message "Conflit de fusion détecté. Annulation de la fusion..." "ALERTE"
-        Try { git merge --abort } Catch { Log-Message "Échec de git merge --abort. Message: $($_.Exception.Message)" "ALERTE"}
+        & git merge --abort
         $ConflictLogFile = Join-Path $ConflictLogDir "sync_conflicts_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
         Add-Content -Path $ConflictLogFile -Value "--- Conflit Git détecté lors du pull - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ---"
         Add-Content -Path $ConflictLogFile -Value "Dépôt : $RepoPath"
-        Add-Content -Path $ConflictLogFile -Value "Branche : main" # Assumer main, ajuster si nécessaire
+        Add-Content -Path $ConflictLogFile -Value "Branche : main"
         Add-Content -Path $ConflictLogFile -Value "Statut avant abort :"
-        (git status) | Out-String | Add-Content -Path $ConflictLogFile
+        (& git status) | Out-String | Add-Content -Path $ConflictLogFile
         Add-Content -Path $ConflictLogFile -Value "--- FIN DU CONFLIT ---"
         Log-Message "Conflit de fusion annulé. Voir $($ConflictLogFile) pour les détails. Synchronisation interrompue." "ERREUR"
     } else {
@@ -68,192 +60,128 @@ Try {
     Exit 1 # Sortie avec erreur
 }
 
-# --- Étape 3: Analyse des Nouveautés et Identification des Fichiers à Synchroniser ---
-Log-Message "Étape 3: Analyse des Nouveautés et Identification des Fichiers à Synchroniser..."
+# Étape 3 & 4: Analyse des Nouveautés et Exécution des Opérations de Synchronisation
+Log-Message "Analyse des nouveautés et synchronisation des fichiers..."
+
+# Chemins de base
+$RooConfigPath = Join-Path $RepoPath "roo-config"
+$RooModesPath = Join-Path $RepoPath "roo-modes"
 
-# Liste des fichiers et patterns à synchroniser (relatifs à $RepoPath)
-$TargetFilesAndPatterns = @(
+# Fichiers spécifiques à inclure
+$SpecificFiles = @(
     "roo-config/settings/settings.json",
     "roo-config/settings/servers.json",
     "roo-config/settings/modes.json",
     "roo-config/escalation-test-config.json",
-    "roo-config/qwen3-profiles/qwen3-parameters.json",
-    "roo-modes/configs/modes.json",
-    "roo-modes/configs/new-roomodes.json",
-    "roo-modes/configs/standard-modes.json",
-    "roo-modes/configs/vscode-custom-modes.json"
+    "roo-config/qwen3-profiles/qwen3-parameters.json"
 )
 
-# Ajouter les .ps1 sous roo-config (récursif)
-Get-ChildItem -Path (Join-Path $RepoPath "roo-config") -Filter "*.ps1" -Recurse | ForEach-Object {
-    $TargetFilesAndPatterns += $_.FullName.Substring($RepoPath.Length + 1)
-}
+# Récupérer les fichiers .ps1 sous roo-config
+$Ps1Files = Get-ChildItem -Path $RooConfigPath -Recurse -Include *.ps1 | Select-Object -ExpandProperty FullName
 
-# Ajouter les .json sous roo-modes/n5/configs/ (récursif)
-Get-ChildItem -Path (Join-Path $RepoPath "roo-modes/n5/configs") -Filter "*.json" -Recurse | ForEach-Object {
-    $TargetFilesAndPatterns += $_.FullName.Substring($RepoPath.Length + 1)
-}
+# Récupérer les fichiers .json sous roo-modes/configs et roo-modes/n5/configs
+$JsonModesFiles = @()
+$JsonModesFiles += Get-ChildItem -Path (Join-Path $RooModesPath "configs") -Recurse -Include *.json | Select-Object -ExpandProperty FullName
+$JsonModesFiles += Get-ChildItem -Path (Join-Path $RooModesPath "n5/configs") -Recurse -Include *.json | Select-Object -ExpandProperty FullName
 
-# Ajouter les .md sous roo-config/ (récursif)
-Get-ChildItem -Path (Join-Path $RepoPath "roo-config") -Filter "*.md" -Recurse | ForEach-Object {
-    $TargetFilesAndPatterns += $_.FullName.Substring($RepoPath.Length + 1)
-}
+# Récupérer les fichiers .md sous roo-config et roo-modes
+$MdFiles = @()
+$MdFiles += Get-ChildItem -Path $RooConfigPath -Recurse -Include *.md | Select-Object -ExpandProperty FullName
+$MdFiles += Get-ChildItem -Path $RooModesPath -Recurse -Include *.md | Select-Object -ExpandProperty FullName
 
-# Ajouter les .md sous roo-modes/ (récursif)
-Get-ChildItem -Path (Join-Path $RepoPath "roo-modes") -Filter "*.md" -Recurse | ForEach-Object {
-    $TargetFilesAndPatterns += $_.FullName.Substring($RepoPath.Length + 1)
+# Combiner toutes les listes de fichiers à synchroniser, en convertissant les chemins absolus en relatifs
+$FilesToSync = @()
+foreach ($file in $SpecificFiles) {
+    $FilesToSync += $file
 }
-
-# Rendre la liste unique
-$UniqueTargetFiles = $TargetFilesAndPatterns | Sort-Object -Unique
-
-Log-Message "Liste des fichiers cibles potentiels construite."
-
-$FilesModifiedByPull = @()
-Try {
-    Log-Message "Détection des fichiers modifiés par le pull (HEAD vs HEAD@{1})..."
-    if ($HeadBeforePull) {
-        $FilesModifiedByPull = git diff --name-only $HeadBeforePull HEAD | ForEach-Object { $_ -replace '/', '\' } # Normaliser les slashes pour Windows
-    } else {
-        Log-Message "Impossible de déterminer HEAD avant le pull, synchronisation de tous les fichiers cibles." "ALERTE"
-        # En cas d'échec de la détection (ex: premier pull), on pourrait choisir de synchroniser tous les $UniqueTargetFiles
-        # Pour l'instant, on continue avec une liste vide, ce qui signifie que seuls les fichiers explicitement listés et existants seront copiés.
-        # Ou, pour être plus sûr, on peut forcer la synchronisation de tous les fichiers cibles.
-        # $FilesModifiedByPull = $UniqueTargetFiles # Décommentez pour synchroniser tous les fichiers cibles si diff échoue
-    }
-    Log-Message "Fichiers modifiés par le pull : $($FilesModifiedByPull -join ', ')"
-} Catch {
-    Log-Message "Erreur lors de la détection des fichiers modifiés par git diff. Message : $($_.Exception.Message)" "ALERTE"
-    # Continuer, mais la synchronisation pourrait ne pas être précise.
+foreach ($file in $Ps1Files) {
+    $FilesToSync += $file.Replace($RepoPath + "\", "")
 }
-
-$FilesToActuallySync = @()
-if ($FilesModifiedByPull.Count -gt 0) {
-    foreach ($modifiedFile in $FilesModifiedByPull) {
-        if ($UniqueTargetFiles -contains $modifiedFile) {
-            $FilesToActuallySync += $modifiedFile
-        }
-    }
-} else {
-    # Si git diff n'a rien retourné ou a échoué, on se rabat sur une copie de tous les fichiers cibles existants
-    # Ceci est une mesure de sécurité, mais peut être affiné.
-    Log-Message "Aucun fichier spécifiquement modifié par le pull détecté ou diff échoué. Vérification de tous les fichiers cibles pour synchronisation." "ALERTE"
-    foreach ($targetFile in $UniqueTargetFiles) {
-        if (Test-Path (Join-Path $RepoPath $targetFile)) {
-            $FilesToActuallySync += $targetFile
-        }
-    }
+foreach ($file in $JsonModesFiles) {
+    $FilesToSync += $file.Replace($RepoPath + "\", "")
 }
-$FilesToActuallySync = $FilesToActuallySync | Sort-Object -Unique
-Log-Message "Fichiers identifiés pour synchronisation réelle : $($FilesToActuallySync -join ', ')"
-
-
-# --- Étape 4: Exécution des Opérations de Synchronisation ---
-Log-Message "Étape 4: Exécution des Opérations de Synchronisation..."
-$SyncedJsonFiles = @()
-
-if ($FilesToActuallySync.Count -eq 0) {
-    Log-Message "Aucun fichier à synchroniser cette fois-ci."
+foreach ($file in $MdFiles) {
+    $FilesToSync += $file.Replace($RepoPath + "\", "")
 }
 
-foreach ($FileRelPath in $FilesToActuallySync) {
-    $SourceFile = Join-Path $RepoPath $FileRelPath
-    $DestinationFile = Join-Path $RepoPath $FileRelPath # Assumer que le dépôt est l'emplacement actif
+# Supprimer les doublons et s'assurer que les chemins sont relatifs
+$FilesToSync = $FilesToSync | Sort-Object -Unique
+
+foreach ($File in $FilesToSync) {
+    $SourceFile = Join-Path $RepoPath $File
+    $DestinationFile = Join-Path $RepoPath $File # Assumer que le dépôt est l'emplacement actif
 
     if (Test-Path $SourceFile) {
         Try {
-            Copy-Item -Path $SourceFile -Destination $DestinationFile -Force
-            Log-Message "Synchronisé : $($FileRelPath)"
-            if ($FileRelPath.EndsWith(".json")) {
-                $SyncedJsonFiles += $DestinationFile
-            }
+            Copy-Item -Path $SourceFile -Destination $DestinationFile -Force -ErrorAction Stop
+            Log-Message "Synchronisé : $($File)"
         } Catch {
-            Log-Message "Échec de la synchronisation de $($FileRelPath). Message : $($_.Exception.Message)" "ERREUR"
-            # Selon la criticité, on pourrait vouloir sortir ici (Exit 1)
+            Log-Message "Échec de la synchronisation de $($File). Message : $($_.Exception.Message)" "ERREUR"
+            Exit 1
         }
-    } else {
-        Log-Message "Fichier source non trouvé pour la synchronisation (peut avoir été supprimé par le pull) : $($SourceFile)" "ALERTE"
     }
 }
 
-# --- Étape 5: Vérification Post-Synchronisation ---
-Log-Message "Étape 5: Vérification Post-Synchronisation..."
+# Étape 5: Vérification Post-Synchronisation
+Log-Message "Vérification post-synchronisation..."
 
-# Vérification des fichiers JSON synchronisés
-if ($SyncedJsonFiles.Count -gt 0) {
-    Log-Message "Vérification des fichiers JSON synchronisés..."
-    foreach ($JsonFileFullPath in $SyncedJsonFiles) {
-        if (Test-Path $JsonFileFullPath) {
-            Try {
-                Get-Content -Raw $JsonFileFullPath | ConvertFrom-Json | Out-Null
-                Log-Message "Vérifié (JSON valide) : $($JsonFileFullPath.Substring($RepoPath.Length + 1))"
-            } Catch {
-                Log-Message "Fichier JSON invalide après synchronisation : $($JsonFileFullPath.Substring($RepoPath.Length + 1)). Détails : $($_.Exception.Message)" "ERREUR"
-                Exit 1 # Fichier JSON critique invalide
-            }
-        }
-    }
-} else {
-    Log-Message "Aucun fichier JSON n'a été synchronisé, pas de vérification JSON nécessaire."
+# Récupérer tous les fichiers .json pertinents pour la validation
+$JsonFiles = @()
+$JsonFiles += Get-ChildItem -Path $RooConfigPath -Recurse -Include *.json | Select-Object -ExpandProperty FullName
+$JsonFiles += Get-ChildItem -Path $RooModesPath -Recurse -Include *.json | Select-Object -ExpandProperty FullName
+
+# Convertir les chemins absolus en relatifs pour le log
+$JsonFilesRelative = @()
+foreach ($file in $JsonFiles) {
+    $JsonFilesRelative += $file.Replace($RepoPath + "\", "")
 }
+$JsonFilesRelative = $JsonFilesRelative | Sort-Object -Unique
 
-# Vérification de l'existence des fichiers clés
-$CriticalFiles = @(
-    "roo-config/settings/settings.json",
-    "roo-modes/configs/modes.json"
-    # Ajoutez d'autres fichiers critiques ici si nécessaire
-)
-Log-Message "Vérification de l'existence des fichiers critiques..."
-foreach ($CriticalFileRelPath in $CriticalFiles) {
-    $FullPath = Join-Path $RepoPath $CriticalFileRelPath
-    if (-not (Test-Path $FullPath)) {
-        Log-Message "Fichier critique manquant après synchronisation : $($CriticalFileRelPath)" "ERREUR"
-        Exit 1 # Fichier critique manquant
-    } else {
-        Log-Message "Fichier critique présent : $($CriticalFileRelPath)"
+foreach ($JsonFile in $JsonFilesRelative) {
+    $FullPath = Join-Path $RepoPath $JsonFile
+    if (Test-Path $FullPath) {
+        Try {
+            Get-Content -Raw $FullPath | ConvertFrom-Json | Out-Null
+            Log-Message "Vérifié (JSON valide) : $($JsonFile)"
+        } Catch {
+            Log-Message "ERREUR: Fichier JSON invalide après synchronisation : $($JsonFile). Détails : $($_.Exception.Message)" "ERREUR"
+            Exit 1
+        }
     }
 }
 
-# --- Étape 6: Gestion des Commits de Correction (si nécessaire) ---
-Log-Message "Étape 6: Gestion des Commits de Correction..."
-Try {
-    $PostSyncStatus = git status --porcelain
-    if ($PostSyncStatus) {
-        Log-Message "Modifications détectées après synchronisation (ex: logs). Création d'un commit de correction..." "ALERTE"
-        git add . # Ajoute tous les changements, y compris les logs. Peut être affiné.
-        git commit -m "SYNC: [Automated] Mise à jour post-synchronisation (logs, etc.)"
-        Log-Message "Commit de correction créé."
+# Étape 6: Gestion des Commits de Correction (si nécessaire)
+Log-Message "Vérification des modifications pour commit de correction..."
+$PostSyncStatus = & git status --porcelain
+if ($PostSyncStatus) {
+    Log-Message "Modifications détectées après synchronisation. Création d'un commit de correction..."
+    & git add .
+    & git commit -m "SYNC: [Automated] Synchronisation des paramètres Roo post-pull"
+    Log-Message "Commit de correction créé."
 
-        Log-Message "Tentative de push du commit de correction..."
-        git push origin main
+    Log-Message "Tentative de push du commit de correction..."
+    Try {
+        & git push origin main | Out-Null -ErrorAction Stop
         Log-Message "Push du commit de correction réussi."
-    } else {
-        Log-Message "Aucune modification à commiter après synchronisation."
+    } Catch {
+        Log-Message "Échec du push du commit de correction. Message : $($_.Exception.Message)" "ERREUR"
+        # Ne pas quitter ici, car la synchronisation des fichiers a été effectuée localement.
+        # Le push peut être retenté manuellement.
     }
-} Catch {
-    Log-Message "Échec lors de la gestion des commits de correction ou du push. Message : $($_.Exception.Message)" "ERREUR"
-    # Ne pas quitter ici, car la synchronisation des fichiers a été effectuée localement.
-    # Le push peut être retenté manuellement.
+} else {
+    Log-Message "Aucune modification à commiter après synchronisation."
 }
 
-# --- Étape 7: Nettoyage et Rapport Final ---
-Log-Message "Étape 7: Nettoyage et Rapport Final..."
+# Étape 7: Nettoyage et Rapport Final
 if ($StashApplied) {
     Log-Message "Restauration du stash..."
     Try {
-        git stash pop
+        & git stash pop | Out-Null -ErrorAction Stop
         Log-Message "Stash restauré avec succès."
     } Catch {
-        Log-Message "Échec de la restauration du stash. Des conflits peuvent exister. Message : $($_.Exception.Message). Résolution manuelle requise." "ALERTE"
-        # Documenter les conflits de stash pop si nécessaire dans un fichier de conflit dédié
-        $ConflictLogFile = Join-Path $ConflictLogDir "stash_pop_conflicts_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
-        Add-Content -Path $ConflictLogFile -Value "--- Conflit Git détecté lors du stash pop - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ---"
-        Add-Content -Path $ConflictLogFile -Value "$($_.Exception.Message)"
-        (git status) | Out-String | Add-Content -Path $ConflictLogFile
-        Add-Content -Path $ConflictLogFile -Value "--- FIN DU CONFLIT STASH POP ---"
-        Log-Message "Détails du conflit de stash pop enregistrés dans $ConflictLogFile" "ALERTE"
+        Log-Message "Échec de la restauration du stash. Des conflits peuvent exister. Message : $($_.Exception.Message)" "ALERTE"
+        # Documenter les conflits de stash pop si nécessaire
     }
 }
 
-Log-Message "Synchronisation de l'environnement Roo terminée."
-Exit 0
\ No newline at end of file
+Log-Message "Synchronisation de l'environnement Roo terminée."
\ No newline at end of file
