#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Reprise synchronisation Git apr√®s coupure - Session 2025-10-11 16:06

.DESCRIPTION
    Script de reprise complet qui :
    1. V√©rifie l'√©tat actuel (o√π nous en sommes)
    2. Identifie les √©tapes compl√©t√©es
    3. Continue les √©tapes restantes
    4. Journalise tout dans un fichier log

.NOTES
    Session initiale : 2025-10-11 15:12:48
    Reprise : 2025-10-11 16:06:27
#>

$ErrorActionPreference = "Stop"
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$rootDir = Get-Location
$logFile = Join-Path $rootDir "outputs/git-sync-resume-$timestamp.log"

# Fonction de logging am√©lior√©e
function Write-Log {
    param(
        [string]$Message,
        [ValidateSet("INFO", "SUCCESS", "WARN", "ERROR", "PHASE", "STEP")]
        [string]$Level = "INFO"
    )
    
    $timeStr = Get-Date -Format "HH:mm:ss"
    $logEntry = "[$timeStr] [$Level] $Message"
    
    # √âcrire dans le fichier log
    Add-Content -Path $logFile -Value $logEntry -Encoding UTF8
    
    # Affichage console avec couleurs
    $color = switch ($Level) {
        "ERROR" { "Red" }
        "WARN" { "Yellow" }
        "SUCCESS" { "Green" }
        "PHASE" { "Cyan" }
        "STEP" { "Magenta" }
        default { "White" }
    }
    
    Write-Host $Message -ForegroundColor $color
}

# Fonction de confirmation avec logging
function Confirm-Step {
    param([string]$Question)
    Write-Log "QUESTION: $Question" -Level "WARN"
    $response = Read-Host $Question
    Write-Log "R√âPONSE: $response" -Level "INFO"
    return $response -eq 'o'
}

# Header
Write-Host @"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîÑ REPRISE SYNCHRONISATION GIT                                      ‚ïë
‚ïë  Session: $timestamp                                        ‚ïë
‚ïë  Log: $logFile                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"@ -ForegroundColor Cyan

Write-Log "=== D√âBUT REPRISE SYNCHRONISATION ===" -Level "PHASE"
Write-Log "Fichier de log : $logFile" -Level "INFO"

try {
    # =========================================================================
    # √âTAPE 0 : DIAGNOSTIC √âTAT ACTUEL
    # =========================================================================
    Write-Log "`n=== üìä √âTAPE 0 : DIAGNOSTIC √âTAT ACTUEL ===" -Level "PHASE"
    
    Write-Log "V√©rification d√©p√¥t principal..." -Level "STEP"
    $mainStatus = git status --porcelain
    $mainStatusFull = git status
    Write-Log "√âtat d√©p√¥t principal:" -Level "INFO"
    Write-Log $mainStatusFull -Level "INFO"
    
    Write-Log "`nV√©rification derniers commits..." -Level "STEP"
    $lastCommits = git log --oneline -5
    Write-Log "Derniers commits:" -Level "INFO"
    $lastCommits | ForEach-Object { Write-Log $_ -Level "INFO" }
    
    Write-Log "`nComparaison avec remote..." -Level "STEP"
    git fetch origin 2>&1 | Out-Null
    $behind = git rev-list --count HEAD..origin/main 2>$null
    $ahead = git rev-list --count origin/main..HEAD 2>$null
    Write-Log "Commits en retard (remote ‚Üí local): $behind" -Level "WARN"
    Write-Log "Commits en avance (local ‚Üí remote): $ahead" -Level "INFO"
    
    Write-Log "`nV√©rification sous-module mcps/internal..." -Level "STEP"
    Push-Location "mcps/internal"
    $subStatus = git status --porcelain
    $subStatusFull = git status
    Write-Log "√âtat sous-module:" -Level "INFO"
    Write-Log $subStatusFull -Level "INFO"
    
    $subLastCommits = git log --oneline -5
    Write-Log "`nDerniers commits sous-module:" -Level "INFO"
    $subLastCommits | ForEach-Object { Write-Log $_ -Level "INFO" }
    
    $subBehind = git rev-list --count HEAD..origin/main 2>$null
    $subAhead = git rev-list --count origin/main..HEAD 2>$null
    Write-Log "Sous-module - En retard: $subBehind | En avance: $subAhead" -Level "INFO"
    Pop-Location
    
    # Analyse de ce qui reste √† faire
    Write-Log "`n=== üéØ ANALYSE √âTAPES RESTANTES ===" -Level "PHASE"
    
    $needsSubmoduleCommit = $subStatus.Count -gt 0
    $needsMainCommit = $mainStatus.Count -gt 0
    $needsMainPull = $behind -gt 0
    $needsSubPull = $subBehind -gt 0
    $needsMainPush = $ahead -gt 0
    $needsSubPush = $subAhead -gt 0
    
    Write-Log "‚òê Commits sous-module mcps/internal : $(if ($needsSubmoduleCommit) { 'OUI (fichiers modifi√©s)' } else { 'NON (d√©j√† fait)' })" -Level $(if ($needsSubmoduleCommit) { "WARN" } else { "SUCCESS" })
    Write-Log "‚òê Commits d√©p√¥t principal : $(if ($needsMainCommit) { 'OUI (fichiers modifi√©s)' } else { 'NON (d√©j√† fait)' })" -Level $(if ($needsMainCommit) { "WARN" } else { "SUCCESS" })
    Write-Log "‚òê Pull d√©p√¥t principal : $(if ($needsMainPull) { "OUI ($behind commits en retard)" } else { 'NON (√† jour)' })" -Level $(if ($needsMainPull) { "WARN" } else { "SUCCESS" })
    Write-Log "‚òê Pull sous-module : $(if ($needsSubPull) { "OUI ($subBehind commits en retard)" } else { 'NON (√† jour)' })" -Level $(if ($needsSubPull) { "WARN" } else { "SUCCESS" })
    Write-Log "‚òê Push d√©p√¥t principal : $(if ($needsMainPush) { "OUI ($ahead commits)" } else { 'NON (d√©j√† push√©)' })" -Level $(if ($needsMainPush) { "WARN" } else { "SUCCESS" })
    Write-Log "‚òê Push sous-module : $(if ($needsSubPush) { "OUI ($subAhead commits)" } else { 'NON (d√©j√† push√©)' })" -Level $(if ($needsSubPush) { "WARN" } else { "SUCCESS" })
    
    if (-not (Confirm-Step "`n‚ö†Ô∏è Continuer la synchronisation ?")) {
        Write-Log "Synchronisation annul√©e par l'utilisateur" -Level "WARN"
        exit 0
    }
    
    # =========================================================================
    # √âTAPE 1 : COMMITS SOUS-MODULE (si n√©cessaire)
    # =========================================================================
    if ($needsSubmoduleCommit) {
        Write-Log "`n=== üíæ √âTAPE 1 : COMMITS SOUS-MODULE mcps/internal ===" -Level "PHASE"
        
        Push-Location "mcps/internal"
        
        Write-Log "Fichiers modifi√©s dans sous-module:" -Level "INFO"
        git status --short | ForEach-Object { Write-Log $_ -Level "INFO" }
        
        # Identifier les fichiers TraceSummaryService
        $hasTraceSummary = git status --short | Select-String "TraceSummaryService"
        $hasRapport = git status --short | Select-String "RAPPORT_MISSION"
        
        if ($hasTraceSummary) {
            Write-Log "`n1Ô∏è‚É£ Commit TraceSummaryService.ts" -Level "STEP"
            git add servers/roo-state-manager/src/services/TraceSummaryService.ts
            git commit -m @"
refactor(TraceSummaryService): Unified global counter for chronological item numbering

- Replace 7 type-specific counters with single globalCounter
- Improves readability and chronological traceability
- Affects: user, assistant, tool, error, condensation, instruction, completion items
- Better alignment with trace summary timeline
"@
            Write-Log "‚úÖ TraceSummaryService.ts commit√©" -Level "SUCCESS"
        }
        
        if ($hasRapport) {
            Write-Log "`n2Ô∏è‚É£ Commit rapport Phase 4" -Level "STEP"
            git add servers/jupyter-papermill-mcp-server/RAPPORT_MISSION_PHASE4_TRIPLE_GROUNDING.md
            git commit -m "docs(jupyter-mcp): Add Phase 4 Triple Grounding mission report"
            Write-Log "‚úÖ Rapport Phase 4 commit√©" -Level "SUCCESS"
        }
        
        # S'il reste d'autres fichiers modifi√©s
        $remainingFiles = git status --porcelain
        if ($remainingFiles) {
            Write-Log "`n‚ö†Ô∏è Autres fichiers modifi√©s d√©tect√©s:" -Level "WARN"
            git status --short | ForEach-Object { Write-Log $_ -Level "INFO" }
            
            if (Confirm-Step "Commiter tous les fichiers restants ?") {
                $commitMsg = Read-Host "Message de commit"
                git add -A
                git commit -m $commitMsg
                Write-Log "‚úÖ Fichiers restants commit√©s" -Level "SUCCESS"
            }
        }
        
        Pop-Location
    } else {
        Write-Log "`n=== ‚úÖ √âTAPE 1 : COMMITS SOUS-MODULE ===" -Level "PHASE"
        Write-Log "Sous-module d√©j√† propre, passage √† l'√©tape suivante" -Level "SUCCESS"
    }
    
    # =========================================================================
    # √âTAPE 2 : COMMIT SOUS-MODULE DANS D√âP√îT PRINCIPAL
    # =========================================================================
    Write-Log "`n=== üîó √âTAPE 2 : COMMIT SOUS-MODULE DANS D√âP√îT PRINCIPAL ===" -Level "PHASE"
    
    $submoduleModified = git status --porcelain | Select-String "mcps/internal"
    if ($submoduleModified) {
        Write-Log "Sous-module modifi√©, commit n√©cessaire" -Level "WARN"
        git add mcps/internal
        git commit -m @"
feat(mcps/internal): Update submodule with TraceSummaryService refactor

- TraceSummaryService: Unified global counter system
- Added Phase 4 Triple Grounding mission report
"@
        Write-Log "‚úÖ Sous-module commit√© dans d√©p√¥t principal" -Level "SUCCESS"
    } else {
        Write-Log "Sous-module d√©j√† √† jour dans d√©p√¥t principal" -Level "SUCCESS"
    }
    
    # =========================================================================
    # √âTAPE 3 : COMMIT FICHIERS EXPORTS (si n√©cessaire)
    # =========================================================================
    Write-Log "`n=== üìÑ √âTAPE 3 : COMMIT FICHIERS EXPORTS ===" -Level "PHASE"
    
    $exportsFile = "exports/TRACE_CORRIGEE.md"
    if ((Test-Path $exportsFile) -and (git status --porcelain $exportsFile)) {
        Write-Log "Fichier $exportsFile non track√©" -Level "WARN"
        if (Confirm-Step "Commiter $exportsFile ?") {
            git add $exportsFile
            git commit -m "docs: Add corrected trace export"
            Write-Log "‚úÖ $exportsFile commit√©" -Level "SUCCESS"
        }
    } else {
        Write-Log "Pas de fichier exports/ √† commiter" -Level "SUCCESS"
    }
    
    # =========================================================================
    # √âTAPE 4 : PULL D√âP√îT PRINCIPAL
    # =========================================================================
    if ($needsMainPull) {
        Write-Log "`n=== ‚¨áÔ∏è √âTAPE 4 : PULL D√âP√îT PRINCIPAL ===" -Level "PHASE"
        
        Write-Log "$behind commits en retard sur origin/main" -Level "WARN"
        Write-Log "`nüìú Commits distants √† int√©grer:" -Level "INFO"
        git log --oneline HEAD..origin/main | Select-Object -First 20 | ForEach-Object { Write-Log $_ -Level "INFO" }
        
        if (Confirm-Step "`nPuller avec strat√©gie merge ?") {
            Write-Log "D√©but pull avec merge..." -Level "STEP"
            try {
                $pullOutput = git pull origin main --no-rebase 2>&1
                $pullOutput | ForEach-Object { Write-Log $_ -Level "INFO" }
                Write-Log "‚úÖ Pull r√©ussi !" -Level "SUCCESS"
            } catch {
                Write-Log "‚ùå CONFLIT D√âTECT√â durant le pull !" -Level "ERROR"
                Write-Log "Message d'erreur: $_" -Level "ERROR"
                
                $conflictFiles = git diff --name-only --diff-filter=U
                Write-Log "`nFichiers en conflit:" -Level "ERROR"
                $conflictFiles | ForEach-Object { Write-Log " - $_" -Level "ERROR" }
                
                Write-Log @"

üõ†Ô∏è R√âSOLUTION MANUELLE REQUISE :
---------------------------------
1. Ouvrir chaque fichier en conflit
2. Chercher les markers <<<<<<< ======= >>>>>>>
3. R√©soudre manuellement les conflits
4. git add <fichiers_r√©solus>
5. git commit (pour finaliser le merge)

Apr√®s r√©solution, relancer ce script pour continuer.
"@ -Level "WARN"
                throw "Conflits n√©cessitent r√©solution manuelle"
            }
        } else {
            Write-Log "Pull ignor√© - √† effectuer manuellement plus tard" -Level "WARN"
        }
    } else {
        Write-Log "`n=== ‚úÖ √âTAPE 4 : PULL D√âP√îT PRINCIPAL ===" -Level "PHASE"
        Write-Log "D√©p√¥t principal d√©j√† √† jour" -Level "SUCCESS"
    }
    
    # =========================================================================
    # √âTAPE 5 : PULL SOUS-MODULE mcps/internal
    # =========================================================================
    if ($needsSubPull) {
        Write-Log "`n=== üì¶ √âTAPE 5 : PULL SOUS-MODULE mcps/internal ===" -Level "PHASE"
        
        Push-Location "mcps/internal"
        
        Write-Log "$subBehind commits en retard sur origin/main (sous-module)" -Level "WARN"
        Write-Log "`nüìú Commits distants sous-module:" -Level "INFO"
        git log --oneline HEAD..origin/main | Select-Object -First 10 | ForEach-Object { Write-Log $_ -Level "INFO" }
        
        if (Confirm-Step "`nPuller sous-module avec merge ?") {
            Write-Log "D√©but pull sous-module..." -Level "STEP"
            try {
                $subPullOutput = git pull origin main --no-rebase 2>&1
                $subPullOutput | ForEach-Object { Write-Log $_ -Level "INFO" }
                Write-Log "‚úÖ Pull sous-module r√©ussi !" -Level "SUCCESS"
            } catch {
                Write-Log "‚ùå CONFLIT dans sous-module !" -Level "ERROR"
                Write-Log "Message d'erreur: $_" -Level "ERROR"
                
                $subConflictFiles = git diff --name-only --diff-filter=U
                Write-Log "`nFichiers en conflit (sous-module):" -Level "ERROR"
                $subConflictFiles | ForEach-Object { Write-Log " - $_" -Level "ERROR" }
                
                Write-Log "R√©solution manuelle requise dans mcps/internal/" -Level "WARN"
                throw "Conflits sous-module n√©cessitent r√©solution manuelle"
            }
        }
        
        Pop-Location
        
        # V√©rifier si sous-module a chang√© apr√®s pull
        $submoduleChanged = git status --porcelain | Select-String "mcps/internal"
        if ($submoduleChanged) {
            Write-Log "`nMise √† jour r√©f√©rence sous-module dans d√©p√¥t principal" -Level "STEP"
            git add mcps/internal
            git commit -m "chore: Update mcps/internal submodule after merge"
            Write-Log "‚úÖ R√©f√©rence sous-module mise √† jour" -Level "SUCCESS"
        }
    } else {
        Write-Log "`n=== ‚úÖ √âTAPE 5 : PULL SOUS-MODULE ===" -Level "PHASE"
        Write-Log "Sous-module d√©j√† √† jour" -Level "SUCCESS"
    }
    
    # =========================================================================
    # √âTAPE 6 : VALIDATION PR√â-PUSH
    # =========================================================================
    Write-Log "`n=== ‚úÖ √âTAPE 6 : VALIDATION PR√â-PUSH ===" -Level "PHASE"
    
    Write-Log "V√©rification finale de l'√©tat..." -Level "STEP"
    
    $finalMainStatus = git status --porcelain
    if ($finalMainStatus) {
        Write-Log "‚ö†Ô∏è Working tree non propre:" -Level "WARN"
        $finalMainStatus | ForEach-Object { Write-Log $_ -Level "WARN" }
    } else {
        Write-Log "‚úÖ Working tree propre" -Level "SUCCESS"
    }
    
    $finalAhead = git rev-list --count origin/main..HEAD 2>$null
    Write-Log "`nüì§ $finalAhead commits √† pusher (d√©p√¥t principal)" -Level "INFO"
    
    if ($finalAhead -gt 0) {
        Write-Log "`nüìú Commits √† pusher:" -Level "INFO"
        git log --oneline origin/main..HEAD | ForEach-Object { Write-Log $_ -Level "INFO" }
        
        Write-Log "`nüîç Dry-run push:" -Level "STEP"
        $dryRunOutput = git push --dry-run origin main 2>&1
        $dryRunOutput | ForEach-Object { Write-Log $_ -Level "INFO" }
    }
    
    Push-Location "mcps/internal"
    $finalSubAhead = git rev-list --count origin/main..HEAD 2>$null
    Write-Log "`nüì§ $finalSubAhead commits √† pusher (sous-module)" -Level "INFO"
    Pop-Location
    
    # =========================================================================
    # √âTAPE 7 : PUSH FINAL
    # =========================================================================
    Write-Log "`n=== üöÄ √âTAPE 7 : PUSH FINAL ===" -Level "PHASE"
    
    if ($finalAhead -gt 0) {
        if (Confirm-Step "`nüöÄ Pusher $finalAhead commits vers origin/main (d√©p√¥t principal) ?") {
            Write-Log "Push d√©p√¥t principal en cours..." -Level "STEP"
            $pushOutput = git push origin main 2>&1
            $pushOutput | ForEach-Object { Write-Log $_ -Level "INFO" }
            Write-Log "‚úÖ Push d√©p√¥t principal r√©ussi !" -Level "SUCCESS"
        } else {
            Write-Log "Push d√©p√¥t principal ignor√©" -Level "WARN"
        }
    } else {
        Write-Log "Rien √† pusher pour le d√©p√¥t principal" -Level "SUCCESS"
    }
    
    if ($finalSubAhead -gt 0) {
        if (Confirm-Step "`nPusher $finalSubAhead commits vers origin/main (sous-module) ?") {
            Write-Log "Push sous-module en cours..." -Level "STEP"
            Push-Location "mcps/internal"
            $subPushOutput = git push origin main 2>&1
            $subPushOutput | ForEach-Object { Write-Log $_ -Level "INFO" }
            Pop-Location
            Write-Log "‚úÖ Push sous-module r√©ussi !" -Level "SUCCESS"
        } else {
            Write-Log "Push sous-module ignor√©" -Level "WARN"
        }
    } else {
        Write-Log "Rien √† pusher pour le sous-module" -Level "SUCCESS"
    }
    
    # =========================================================================
    # V√âRIFICATION FINALE
    # =========================================================================
    Write-Log "`n=== üéØ V√âRIFICATION FINALE ===" -Level "PHASE"
    
    Write-Log "`nüìä √âtat final d√©p√¥t principal:" -Level "INFO"
    $finalStatus = git status
    $finalStatus | ForEach-Object { Write-Log $_ -Level "INFO" }
    
    Write-Log "`nüì¶ √âtat final sous-modules:" -Level "INFO"
    $submoduleStatus = git submodule status
    $submoduleStatus | ForEach-Object { Write-Log $_ -Level "INFO" }
    
    Write-Log "`nüìú Derniers commits:" -Level "INFO"
    git log --oneline -5 | ForEach-Object { Write-Log $_ -Level "INFO" }
    
    # R√©capitulatif final
    Write-Log "`n=== ‚úÖ SYNCHRONISATION TERMIN√âE AVEC SUCC√àS ! ===" -Level "SUCCESS"
    Write-Log @"

üìã R√âSUM√â COMPLET :
-------------------
‚úÖ Tous les commits effectu√©s
‚úÖ Pulls synchronis√©s (d√©p√¥t principal + sous-modules)
‚úÖ Pushs effectu√©s
‚úÖ Working tree propre
‚úÖ Aucun conflit non r√©solu

üìÑ Log complet : $logFile
"@ -Level "SUCCESS"

} catch {
    Write-Log "`n‚ùå ERREUR DURANT SYNCHRONISATION" -Level "ERROR"
    Write-Log "Message: $($_.Exception.Message)" -Level "ERROR"
    Write-Log "StackTrace: $($_.ScriptStackTrace)" -Level "ERROR"
    Write-Log "`nüìÑ Log disponible : $logFile" -Level "ERROR"
    
    Write-Log @"

üîß ACTIONS DE R√âCUP√âRATION :
-----------------------------
1. Consulter le log : $logFile
2. V√©rifier l'√©tat : git status
3. Si conflits : r√©soudre manuellement puis :
   - git add <fichiers_r√©solus>
   - git commit (pour merge) OU git rebase --continue (pour rebase)
4. Relancer ce script apr√®s r√©solution

"@ -Level "WARN"
    exit 1
}