# Script de validation de la configuration VSCode UTF-8
# Ex√©cute depuis le r√©pertoire du projet

Write-Host "=== Validation de la configuration VSCode UTF-8 ===" -ForegroundColor Green
Write-Host ""

# Changer vers le r√©pertoire du script
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
Set-Location $scriptDir
Write-Host "R√©pertoire de travail : $(Get-Location)" -ForegroundColor Cyan
Write-Host ""

# Test 1: V√©rification de l'encodage actuel
Write-Host "Test 1: V√©rification de l'encodage du terminal" -ForegroundColor Yellow
Write-Host "Page de code actuelle : $([Console]::OutputEncoding.CodePage)"
Write-Host "Encodage de sortie : $([Console]::OutputEncoding.EncodingName)"

# Forcer UTF-8 pour ce script
chcp 65001 | Out-Null
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

Write-Host "Apr√®s configuration UTF-8 :"
Write-Host "Page de code : $([Console]::OutputEncoding.CodePage)"
Write-Host "Encodage : $([Console]::OutputEncoding.EncodingName)"
Write-Host ""

# Test 2: Caract√®res fran√ßais
Write-Host "Test 2: Affichage des caract√®res fran√ßais" -ForegroundColor Yellow
Write-Host "√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω"
Write-Host "√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ë√í√ì√î√ï√ñ√ò√ô√ö√õ√ú√ù"
Write-Host "Mots avec accents : caf√©, h√¥tel, na√Øf, co√Øncidence, √™tre, cr√©√©"
Write-Host ""

# Test 3: Caract√®res sp√©ciaux
Write-Host "Test 3: Caract√®res sp√©ciaux et symboles" -ForegroundColor Yellow
Write-Host "‚Ç¨ ¬£ ¬• ¬© ¬Æ ‚Ñ¢ ¬ß ¬∂ ‚Ä¢ ‚Ä¶ ¬´ ¬ª " " ' '"
Write-Host "Symboles : ¬± √ó √∑ ‚â† ‚â§ ‚â• ‚àû ‚àö ‚àë ‚àè"
Write-Host ""

# Test 4: V√©rification des fichiers de configuration
Write-Host "Test 4: V√©rification des fichiers de configuration" -ForegroundColor Yellow

# V√©rifier settings.json workspace
$workspaceSettings = ".\.vscode\settings.json"
if (Test-Path $workspaceSettings) {
    Write-Host "‚úÖ Fichier workspace settings.json trouv√©" -ForegroundColor Green
    $content = Get-Content $workspaceSettings -Raw
    if ($content -match '"files\.encoding":\s*"utf8"') {
        Write-Host "‚úÖ Configuration files.encoding: utf8 pr√©sente" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Configuration files.encoding manquante" -ForegroundColor Red
    }
    if ($content -match '"chcp 65001"') {
        Write-Host "‚úÖ Configuration terminal UTF-8 pr√©sente" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Configuration terminal UTF-8 manquante" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Fichier workspace settings.json non trouv√©" -ForegroundColor Red
}

# V√©rifier settings.json utilisateur
$userSettings = "$env:APPDATA\Code\User\settings.json"
if (Test-Path $userSettings) {
    Write-Host "‚úÖ Fichier utilisateur settings.json trouv√©" -ForegroundColor Green
    $userContent = Get-Content $userSettings -Raw
    if ($userContent -match '"files\.encoding":\s*"utf8"') {
        Write-Host "‚úÖ Configuration utilisateur UTF-8 pr√©sente" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Configuration utilisateur UTF-8 recommand√©e" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå Fichier utilisateur settings.json non trouv√©" -ForegroundColor Red
}
Write-Host ""

# Test 5: Cr√©ation d'un fichier de test
Write-Host "Test 5: Cr√©ation d'un fichier de test UTF-8" -ForegroundColor Yellow
$testContent = @"
# Fichier de test UTF-8 - $(Get-Date)
Caract√®res fran√ßais : √†√©√®√π√ß √Ä√â√à√ô√á
Caract√®res sp√©ciaux : ‚Ç¨¬£¬•¬©¬Æ‚Ñ¢
Emojis : üöÄüíªüìÅ‚úÖ
Phrase : "L'√©t√© dernier, j'ai visit√© un ch√¢teau pr√®s de Montr√©al."
"@

$testFile = "validation-utf8-test.txt"
try {
    $testContent | Out-File -FilePath $testFile -Encoding UTF8 -Force
    Write-Host "‚úÖ Fichier '$testFile' cr√©√© avec succ√®s" -ForegroundColor Green
    
    # Lire et afficher le contenu
    $readContent = Get-Content $testFile -Encoding UTF8
    Write-Host "Contenu lu du fichier :"
    $readContent | ForEach-Object { Write-Host "  $_" }
} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation du fichier : $($_.Exception.Message)" -ForegroundColor Red
}
Write-Host ""

# Test 6: Informations syst√®me
Write-Host "Test 6: Informations syst√®me" -ForegroundColor Yellow
Write-Host "Version PowerShell : $($PSVersionTable.PSVersion)"
Write-Host "Culture syst√®me : $([System.Globalization.CultureInfo]::CurrentCulture.Name)"
Write-Host "Culture UI : $([System.Globalization.CultureInfo]::CurrentUICulture.Name)"
Write-Host "R√©pertoire de travail : $(Get-Location)"
Write-Host ""

# Test 7: Instructions pour VSCode
Write-Host "Test 7: Instructions pour tester dans VSCode" -ForegroundColor Yellow
Write-Host "1. Ouvrez ce dossier dans VSCode : code ." -ForegroundColor Cyan
Write-Host "2. Ouvrez un terminal int√©gr√© (Ctrl+`)" -ForegroundColor Cyan
Write-Host "3. V√©rifiez que PowerShell d√©marre avec UTF-8" -ForegroundColor Cyan
Write-Host "4. Tapez : echo 'caf√© h√¥tel na√Øf'" -ForegroundColor Cyan
Write-Host "5. Ouvrez le fichier test-caracteres-francais.txt" -ForegroundColor Cyan
Write-Host "6. V√©rifiez que tous les caract√®res s'affichent correctement" -ForegroundColor Cyan
Write-Host ""

Write-Host "=== Fin de la validation ===" -ForegroundColor Green
Write-Host "Si tous les tests sont verts et les caract√®res s'affichent bien," -ForegroundColor Cyan
Write-Host "la configuration UTF-8 est correcte !" -ForegroundColor Cyan